
Random_Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003694  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080038e4  080038e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e4  080038e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  0800395c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  0800395c  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e27  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001551  00000000  00000000  00027ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00029410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00029aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012437  00000000  00000000  0002a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008be3  00000000  00000000  0003c4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a016  00000000  00000000  000450b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af0c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002160  00000000  00000000  000af118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800373c 	.word	0x0800373c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800373c 	.word	0x0800373c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4647      	mov	r7, r8
 800040e:	b580      	push	{r7, lr}
 8000410:	0007      	movs	r7, r0
 8000412:	4699      	mov	r9, r3
 8000414:	0c3b      	lsrs	r3, r7, #16
 8000416:	469c      	mov	ip, r3
 8000418:	0413      	lsls	r3, r2, #16
 800041a:	0c1b      	lsrs	r3, r3, #16
 800041c:	001d      	movs	r5, r3
 800041e:	000e      	movs	r6, r1
 8000420:	4661      	mov	r1, ip
 8000422:	0400      	lsls	r0, r0, #16
 8000424:	0c14      	lsrs	r4, r2, #16
 8000426:	0c00      	lsrs	r0, r0, #16
 8000428:	4345      	muls	r5, r0
 800042a:	434b      	muls	r3, r1
 800042c:	4360      	muls	r0, r4
 800042e:	4361      	muls	r1, r4
 8000430:	18c0      	adds	r0, r0, r3
 8000432:	0c2c      	lsrs	r4, r5, #16
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4372      	muls	r2, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	4463      	add	r3, ip
 800044e:	042d      	lsls	r5, r5, #16
 8000450:	0c2d      	lsrs	r5, r5, #16
 8000452:	18c9      	adds	r1, r1, r3
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	1889      	adds	r1, r1, r2
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <rand_lim>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int rand_lim(int limit)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	int divisor = RAND_MAX/(limit+1);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3301      	adds	r3, #1
 8000470:	0019      	movs	r1, r3
 8000472:	480b      	ldr	r0, [pc, #44]	; (80004a0 <rand_lim+0x3c>)
 8000474:	f7ff fedc 	bl	8000230 <__divsi3>
 8000478:	0003      	movs	r3, r0
 800047a:	60fb      	str	r3, [r7, #12]
	int retval;
	do
	{
		retval= rand()/divisor;
 800047c:	f001 ff02 	bl	8002284 <rand>
 8000480:	0003      	movs	r3, r0
 8000482:	68f9      	ldr	r1, [r7, #12]
 8000484:	0018      	movs	r0, r3
 8000486:	f7ff fed3 	bl	8000230 <__divsi3>
 800048a:	0003      	movs	r3, r0
 800048c:	60bb      	str	r3, [r7, #8]
	}while (retval>limit);
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	429a      	cmp	r2, r3
 8000494:	dcf2      	bgt.n	800047c <rand_lim+0x18>

	return retval;
 8000496:	68bb      	ldr	r3, [r7, #8]
}
 8000498:	0018      	movs	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	b004      	add	sp, #16
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	7fffffff 	.word	0x7fffffff

080004a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b089      	sub	sp, #36	; 0x24
 80004a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 faa7 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f82d 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f000 f8bd 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004b6:	f000 f889 	bl	80005cc <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  saat=rand_lim(23);
 80004ba:	2017      	movs	r0, #23
 80004bc:	f7ff ffd2 	bl	8000464 <rand_lim>
 80004c0:	0003      	movs	r3, r0
 80004c2:	617b      	str	r3, [r7, #20]
	  dakika=rand_lim(59);
 80004c4:	203b      	movs	r0, #59	; 0x3b
 80004c6:	f7ff ffcd 	bl	8000464 <rand_lim>
 80004ca:	0003      	movs	r3, r0
 80004cc:	613b      	str	r3, [r7, #16]
	  saniye=rand_lim(59);
 80004ce:	203b      	movs	r0, #59	; 0x3b
 80004d0:	f7ff ffc8 	bl	8000464 <rand_lim>
 80004d4:	0003      	movs	r3, r0
 80004d6:	60fb      	str	r3, [r7, #12]
	  sprintf(data,(const char *)"%02d:%02d:%02d",saat,dakika,saniye);
 80004d8:	693c      	ldr	r4, [r7, #16]
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	4909      	ldr	r1, [pc, #36]	; (8000504 <main+0x60>)
 80004de:	0038      	movs	r0, r7
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	0023      	movs	r3, r4
 80004e6:	f001 ff0b 	bl	8002300 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)data, 8,10);
 80004ea:	0039      	movs	r1, r7
 80004ec:	4806      	ldr	r0, [pc, #24]	; (8000508 <main+0x64>)
 80004ee:	230a      	movs	r3, #10
 80004f0:	2208      	movs	r2, #8
 80004f2:	f001 faeb 	bl	8001acc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80004f6:	23fa      	movs	r3, #250	; 0xfa
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fae2 	bl	8000ac4 <HAL_Delay>
	  saat=rand_lim(23);
 8000500:	e7db      	b.n	80004ba <main+0x16>
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	08003754 	.word	0x08003754
 8000508:	2000008c 	.word	0x2000008c

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b097      	sub	sp, #92	; 0x5c
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	2428      	movs	r4, #40	; 0x28
 8000514:	193b      	adds	r3, r7, r4
 8000516:	0018      	movs	r0, r3
 8000518:	2330      	movs	r3, #48	; 0x30
 800051a:	001a      	movs	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	f001 fea9 	bl	8002274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000522:	2318      	movs	r3, #24
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	0018      	movs	r0, r3
 8000528:	2310      	movs	r3, #16
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f001 fea1 	bl	8002274 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	0018      	movs	r0, r3
 8000536:	2314      	movs	r3, #20
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f001 fe9a 	bl	8002274 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000540:	0021      	movs	r1, r4
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2205      	movs	r2, #5
 800054c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2202      	movs	r2, #2
 8000552:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	0252      	lsls	r2, r2, #9
 800055a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	0352      	lsls	r2, r2, #13
 8000562:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	187b      	adds	r3, r7, r1
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fd0f 	bl	8000f90 <HAL_RCC_OscConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000576:	f000 f8c5 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	2118      	movs	r1, #24
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2207      	movs	r2, #7
 8000580:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2202      	movs	r2, #2
 8000586:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2101      	movs	r1, #1
 8000598:	0018      	movs	r0, r3
 800059a:	f001 f813 	bl	80015c4 <HAL_RCC_ClockConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005a2:	f000 f8af 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 f957 	bl	8001868 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005be:	f000 f8a1 	bl	8000704 <Error_Handler>
  }
}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b017      	add	sp, #92	; 0x5c
 80005c8:	bd90      	pop	{r4, r7, pc}
	...

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <MX_USART1_UART_Init+0x60>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005d8:	22e1      	movs	r2, #225	; 0xe1
 80005da:	0212      	lsls	r2, r2, #8
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0152      	lsls	r2, r2, #5
 80005e4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	00d2      	lsls	r2, r2, #3
 80005f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005f6:	220c      	movs	r2, #12
 80005f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fa05 	bl	8001a24 <HAL_UART_Init>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800061e:	f000 f871 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000008c 	.word	0x2000008c
 800062c:	40013800 	.word	0x40013800

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	240c      	movs	r4, #12
 8000638:	193b      	adds	r3, r7, r4
 800063a:	0018      	movs	r0, r3
 800063c:	2314      	movs	r3, #20
 800063e:	001a      	movs	r2, r3
 8000640:	2100      	movs	r1, #0
 8000642:	f001 fe17 	bl	8002274 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <MX_GPIO_Init+0xcc>)
 800064c:	2180      	movs	r1, #128	; 0x80
 800064e:	03c9      	lsls	r1, r1, #15
 8000650:	430a      	orrs	r2, r1
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	2380      	movs	r3, #128	; 0x80
 800065a:	03db      	lsls	r3, r3, #15
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000664:	695a      	ldr	r2, [r3, #20]
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0289      	lsls	r1, r1, #10
 800066c:	430a      	orrs	r2, r1
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000672:	695a      	ldr	r2, [r3, #20]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	029b      	lsls	r3, r3, #10
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_GPIO_Init+0xcc>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	0309      	lsls	r1, r1, #12
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_GPIO_Init+0xcc>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	031b      	lsls	r3, r3, #12
 8000694:	4013      	ands	r3, r2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800069a:	23c0      	movs	r3, #192	; 0xc0
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4818      	ldr	r0, [pc, #96]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	0019      	movs	r1, r3
 80006a4:	f000 fc56 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2290      	movs	r2, #144	; 0x90
 80006b2:	0352      	lsls	r2, r2, #13
 80006b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006bc:	193a      	adds	r2, r7, r4
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fad5 	bl	8000c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	22c0      	movs	r2, #192	; 0xc0
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2201      	movs	r2, #1
 80006d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	4a05      	ldr	r2, [pc, #20]	; (8000700 <MX_GPIO_Init+0xd0>)
 80006ea:	0019      	movs	r1, r3
 80006ec:	0010      	movs	r0, r2
 80006ee:	f000 fac1 	bl	8000c74 <HAL_GPIO_Init>

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b009      	add	sp, #36	; 0x24
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000800 	.word	0x48000800

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x44>)
 8000718:	699a      	ldr	r2, [r3, #24]
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_MspInit+0x44>)
 800071c:	2101      	movs	r1, #1
 800071e:	430a      	orrs	r2, r1
 8000720:	619a      	str	r2, [r3, #24]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x44>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	2201      	movs	r2, #1
 8000728:	4013      	ands	r3, r2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x44>)
 8000730:	69da      	ldr	r2, [r3, #28]
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x44>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0549      	lsls	r1, r1, #21
 8000738:	430a      	orrs	r2, r1
 800073a:	61da      	str	r2, [r3, #28]
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <HAL_MspInit+0x44>)
 800073e:	69da      	ldr	r2, [r3, #28]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	055b      	lsls	r3, r3, #21
 8000744:	4013      	ands	r3, r2
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b08b      	sub	sp, #44	; 0x2c
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	2414      	movs	r4, #20
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	2314      	movs	r3, #20
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f001 fd82 	bl	8002274 <memset>
  if(huart->Instance==USART1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <HAL_UART_MspInit+0x94>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d133      	bne.n	80007e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <HAL_UART_MspInit+0x98>)
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_UART_MspInit+0x98>)
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	01c9      	lsls	r1, r1, #7
 8000784:	430a      	orrs	r2, r1
 8000786:	619a      	str	r2, [r3, #24]
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <HAL_UART_MspInit+0x98>)
 800078a:	699a      	ldr	r2, [r3, #24]
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	01db      	lsls	r3, r3, #7
 8000790:	4013      	ands	r3, r2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_UART_MspInit+0x98>)
 8000798:	695a      	ldr	r2, [r3, #20]
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_UART_MspInit+0x98>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	430a      	orrs	r2, r1
 80007a2:	615a      	str	r2, [r3, #20]
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_UART_MspInit+0x98>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	22c0      	movs	r2, #192	; 0xc0
 80007b6:	00d2      	lsls	r2, r2, #3
 80007b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2202      	movs	r2, #2
 80007c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2203      	movs	r2, #3
 80007cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	187a      	adds	r2, r7, r1
 80007d6:	2390      	movs	r3, #144	; 0x90
 80007d8:	05db      	lsls	r3, r3, #23
 80007da:	0011      	movs	r1, r2
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fa49 	bl	8000c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b00b      	add	sp, #44	; 0x2c
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40013800 	.word	0x40013800
 80007f0:	40021000 	.word	0x40021000

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f938 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
	return 1;
 8000826:	2301      	movs	r3, #1
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_kill>:

int _kill(int pid, int sig)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000838:	f001 fcf2 	bl	8002220 <__errno>
 800083c:	0003      	movs	r3, r0
 800083e:	2216      	movs	r2, #22
 8000840:	601a      	str	r2, [r3, #0]
	return -1;
 8000842:	2301      	movs	r3, #1
 8000844:	425b      	negs	r3, r3
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}

0800084e <_exit>:

void _exit (int status)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000856:	2301      	movs	r3, #1
 8000858:	425a      	negs	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ffe5 	bl	800082e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000864:	e7fe      	b.n	8000864 <_exit+0x16>

08000866 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	e00a      	b.n	800088e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000878:	e000      	b.n	800087c <_read+0x16>
 800087a:	bf00      	nop
 800087c:	0001      	movs	r1, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	60ba      	str	r2, [r7, #8]
 8000884:	b2ca      	uxtb	r2, r1
 8000886:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	3301      	adds	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	429a      	cmp	r2, r3
 8000894:	dbf0      	blt.n	8000878 <_read+0x12>
	}

return len;
 8000896:	687b      	ldr	r3, [r7, #4]
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b006      	add	sp, #24
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e009      	b.n	80008c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	60ba      	str	r2, [r7, #8]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	0018      	movs	r0, r3
 80008bc:	e000      	b.n	80008c0 <_write+0x20>
 80008be:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf1      	blt.n	80008b2 <_write+0x12>
	}
	return len;
 80008ce:	687b      	ldr	r3, [r7, #4]
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b006      	add	sp, #24
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_close>:

int _close(int file)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	return -1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	425b      	negs	r3, r3
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	0192      	lsls	r2, r2, #6
 80008fc:	605a      	str	r2, [r3, #4]
	return 0;
 80008fe:	2300      	movs	r3, #0
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b002      	add	sp, #8
 8000906:	bd80      	pop	{r7, pc}

08000908 <_isatty>:

int _isatty(int file)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	return 1;
 8000910:	2301      	movs	r3, #1
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}

0800091a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b004      	add	sp, #16
 800092e:	bd80      	pop	{r7, pc}

08000930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <_sbrk+0x5c>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_sbrk+0x60>)
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <_sbrk+0x64>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d102      	bne.n	8000952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <_sbrk+0x64>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_sbrk+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	429a      	cmp	r2, r3
 800095e:	d207      	bcs.n	8000970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000960:	f001 fc5e 	bl	8002220 <__errno>
 8000964:	0003      	movs	r3, r0
 8000966:	220c      	movs	r2, #12
 8000968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096a:	2301      	movs	r3, #1
 800096c:	425b      	negs	r3, r3
 800096e:	e009      	b.n	8000984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <_sbrk+0x64>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <_sbrk+0x64>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	18d2      	adds	r2, r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <_sbrk+0x64>)
 8000980:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	b006      	add	sp, #24
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20002000 	.word	0x20002000
 8000990:	00000400 	.word	0x00000400
 8000994:	20000110 	.word	0x20000110
 8000998:	20000128 	.word	0x20000128

0800099c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490e      	ldr	r1, [pc, #56]	; (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0b      	ldr	r4, [pc, #44]	; (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009d2:	f7ff ffe3 	bl	800099c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009d6:	f001 fc29 	bl	800222c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fd63 	bl	80004a4 <main>

080009de <LoopForever>:

LoopForever:
    b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009ec:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 80009f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009f4:	20000128 	.word	0x20000128

080009f8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_COMP_IRQHandler>
	...

080009fc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_Init+0x24>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_Init+0x24>)
 8000a06:	2110      	movs	r1, #16
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 f809 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a12:	f7ff fe7d 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a2e:	681c      	ldr	r4, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x60>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	0019      	movs	r1, r3
 8000a36:	23fa      	movs	r3, #250	; 0xfa
 8000a38:	0098      	lsls	r0, r3, #2
 8000a3a:	f7ff fb6f 	bl	800011c <__udivsi3>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	0019      	movs	r1, r3
 8000a42:	0020      	movs	r0, r4
 8000a44:	f7ff fb6a 	bl	800011c <__udivsi3>
 8000a48:	0003      	movs	r3, r0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 f905 	bl	8000c5a <HAL_SYSTICK_Config>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e00f      	b.n	8000a78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d80b      	bhi.n	8000a76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2301      	movs	r3, #1
 8000a62:	425b      	negs	r3, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f8e2 	bl	8000c30 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_InitTick+0x64>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b003      	add	sp, #12
 8000a7e:	bd90      	pop	{r4, r7, pc}
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x1c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	001a      	movs	r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x20>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	18d2      	adds	r2, r2, r3
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_IncTick+0x20>)
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000114 	.word	0x20000114

08000ab0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_GetTick+0x10>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000114 	.word	0x20000114

08000ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff fff0 	bl	8000ab0 <HAL_GetTick>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	3301      	adds	r3, #1
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	189b      	adds	r3, r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	f7ff ffe0 	bl	8000ab0 <HAL_GetTick>
 8000af0:	0002      	movs	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b004      	add	sp, #16
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	20000008 	.word	0x20000008

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	d828      	bhi.n	8000b74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <__NVIC_SetPriority+0xd4>)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	33c0      	adds	r3, #192	; 0xc0
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	589b      	ldr	r3, [r3, r2]
 8000b32:	1dfa      	adds	r2, r7, #7
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	0011      	movs	r1, r2
 8000b38:	2203      	movs	r2, #3
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	21ff      	movs	r1, #255	; 0xff
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	401a      	ands	r2, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	2303      	movs	r3, #3
 8000b5a:	4003      	ands	r3, r0
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	481f      	ldr	r0, [pc, #124]	; (8000be0 <__NVIC_SetPriority+0xd4>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	33c0      	adds	r3, #192	; 0xc0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b72:	e031      	b.n	8000bd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <__NVIC_SetPriority+0xd8>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	400b      	ands	r3, r1
 8000b80:	3b08      	subs	r3, #8
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3306      	adds	r3, #6
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	2203      	movs	r2, #3
 8000b96:	400a      	ands	r2, r1
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	21ff      	movs	r1, #255	; 0xff
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	401a      	ands	r2, r3
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <__NVIC_SetPriority+0xd8>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	001c      	movs	r4, r3
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	4023      	ands	r3, r4
 8000bc8:	3b08      	subs	r3, #8
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	3306      	adds	r3, #6
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	18c3      	adds	r3, r0, r3
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b003      	add	sp, #12
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	045b      	lsls	r3, r3, #17
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d301      	bcc.n	8000c00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e010      	b.n	8000c22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <SysTick_Config+0x44>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff ff7c 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x44>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x44>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	1c02      	adds	r2, r0, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ffbf 	bl	8000be8 <SysTick_Config>
 8000c6a:	0003      	movs	r3, r0
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e14f      	b.n	8000f24 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	000a      	movs	r2, r1
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d100      	bne.n	8000c9c <HAL_GPIO_Init+0x28>
 8000c9a:	e140      	b.n	8000f1e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d005      	beq.n	8000cb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2203      	movs	r2, #3
 8000cae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d130      	bne.n	8000d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	43da      	mvns	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	0013      	movs	r3, r2
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cea:	2201      	movs	r2, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	091b      	lsrs	r3, r3, #4
 8000d00:	2201      	movs	r2, #1
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d017      	beq.n	8000d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	0013      	movs	r3, r2
 8000d32:	43da      	mvns	r2, r3
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2203      	movs	r2, #3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d123      	bne.n	8000da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	58d3      	ldr	r3, [r2, r3]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2207      	movs	r2, #7
 8000d70:	4013      	ands	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2107      	movs	r1, #7
 8000d8a:	400b      	ands	r3, r1
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	6939      	ldr	r1, [r7, #16]
 8000da4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	2203      	movs	r2, #3
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	23c0      	movs	r3, #192	; 0xc0
 8000de0:	029b      	lsls	r3, r3, #10
 8000de2:	4013      	ands	r3, r2
 8000de4:	d100      	bne.n	8000de8 <HAL_GPIO_Init+0x174>
 8000de6:	e09a      	b.n	8000f1e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de8:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000dea:	699a      	ldr	r2, [r3, #24]
 8000dec:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	430a      	orrs	r2, r1
 8000df2:	619a      	str	r2, [r3, #24]
 8000df4:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <HAL_GPIO_Init+0x2c8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e00:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <HAL_GPIO_Init+0x2cc>)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	589b      	ldr	r3, [r3, r2]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2203      	movs	r2, #3
 8000e12:	4013      	ands	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	2390      	movs	r3, #144	; 0x90
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d013      	beq.n	8000e56 <HAL_GPIO_Init+0x1e2>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a44      	ldr	r2, [pc, #272]	; (8000f44 <HAL_GPIO_Init+0x2d0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00d      	beq.n	8000e52 <HAL_GPIO_Init+0x1de>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a43      	ldr	r2, [pc, #268]	; (8000f48 <HAL_GPIO_Init+0x2d4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x1da>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a42      	ldr	r2, [pc, #264]	; (8000f4c <HAL_GPIO_Init+0x2d8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d101      	bne.n	8000e4a <HAL_GPIO_Init+0x1d6>
 8000e46:	2303      	movs	r3, #3
 8000e48:	e006      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	e004      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e002      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <HAL_GPIO_Init+0x1e4>
 8000e56:	2300      	movs	r3, #0
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4093      	lsls	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e68:	4935      	ldr	r1, [pc, #212]	; (8000f40 <HAL_GPIO_Init+0x2cc>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3302      	adds	r3, #2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	025b      	lsls	r3, r3, #9
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e9a:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	029b      	lsls	r3, r3, #10
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	035b      	lsls	r3, r3, #13
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43da      	mvns	r2, r3
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	039b      	lsls	r3, r3, #14
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_GPIO_Init+0x2dc>)
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	40da      	lsrs	r2, r3
 8000f2c:	1e13      	subs	r3, r2, #0
 8000f2e:	d000      	beq.n	8000f32 <HAL_GPIO_Init+0x2be>
 8000f30:	e6a8      	b.n	8000c84 <HAL_GPIO_Init+0x10>
  } 
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b006      	add	sp, #24
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010000 	.word	0x40010000
 8000f44:	48000400 	.word	0x48000400
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	48000c00 	.word	0x48000c00
 8000f50:	40010400 	.word	0x40010400

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	0008      	movs	r0, r1
 8000f5e:	0011      	movs	r1, r2
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	801a      	strh	r2, [r3, #0]
 8000f66:	1c7b      	adds	r3, r7, #1
 8000f68:	1c0a      	adds	r2, r1, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	1c7b      	adds	r3, r7, #1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d004      	beq.n	8000f7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f74:	1cbb      	adds	r3, r7, #2
 8000f76:	881a      	ldrh	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f7c:	e003      	b.n	8000f86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7e:	1cbb      	adds	r3, r7, #2
 8000f80:	881a      	ldrh	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e301      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d100      	bne.n	8000fae <HAL_RCC_OscConfig+0x1e>
 8000fac:	e08d      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fae:	4bc3      	ldr	r3, [pc, #780]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00e      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fba:	4bc0      	ldr	r3, [pc, #768]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d116      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x64>
 8000fc6:	4bbd      	ldr	r3, [pc, #756]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	025b      	lsls	r3, r3, #9
 8000fce:	401a      	ands	r2, r3
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d10d      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd8:	4bb8      	ldr	r3, [pc, #736]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	029b      	lsls	r3, r3, #10
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x56>
 8000fe4:	e070      	b.n	80010c8 <HAL_RCC_OscConfig+0x138>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d000      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x60>
 8000fee:	e06b      	b.n	80010c8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e2d8      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d107      	bne.n	800100c <HAL_RCC_OscConfig+0x7c>
 8000ffc:	4baf      	ldr	r3, [pc, #700]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4bae      	ldr	r3, [pc, #696]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0249      	lsls	r1, r1, #9
 8001006:	430a      	orrs	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e02f      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10c      	bne.n	800102e <HAL_RCC_OscConfig+0x9e>
 8001014:	4ba9      	ldr	r3, [pc, #676]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4ba8      	ldr	r3, [pc, #672]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800101a:	49a9      	ldr	r1, [pc, #676]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800101c:	400a      	ands	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	4ba6      	ldr	r3, [pc, #664]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4ba5      	ldr	r3, [pc, #660]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001026:	49a7      	ldr	r1, [pc, #668]	; (80012c4 <HAL_RCC_OscConfig+0x334>)
 8001028:	400a      	ands	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e01e      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b05      	cmp	r3, #5
 8001034:	d10e      	bne.n	8001054 <HAL_RCC_OscConfig+0xc4>
 8001036:	4ba1      	ldr	r3, [pc, #644]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	4ba0      	ldr	r3, [pc, #640]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	02c9      	lsls	r1, r1, #11
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	4b9d      	ldr	r3, [pc, #628]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b9c      	ldr	r3, [pc, #624]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0249      	lsls	r1, r1, #9
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xdc>
 8001054:	4b99      	ldr	r3, [pc, #612]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b98      	ldr	r3, [pc, #608]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800105a:	4999      	ldr	r1, [pc, #612]	; (80012c0 <HAL_RCC_OscConfig+0x330>)
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	4b96      	ldr	r3, [pc, #600]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b95      	ldr	r3, [pc, #596]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001066:	4997      	ldr	r1, [pc, #604]	; (80012c4 <HAL_RCC_OscConfig+0x334>)
 8001068:	400a      	ands	r2, r1
 800106a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d014      	beq.n	800109e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fd1c 	bl	8000ab0 <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107e:	f7ff fd17 	bl	8000ab0 <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	; 0x64
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e28a      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	4b8a      	ldr	r3, [pc, #552]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0xee>
 800109c:	e015      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fd07 	bl	8000ab0 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fd02 	bl	8000ab0 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e275      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	4b80      	ldr	r3, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	029b      	lsls	r3, r3, #10
 80010c2:	4013      	ands	r3, r2
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x118>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_OscConfig+0x146>
 80010d4:	e069      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010d6:	4b79      	ldr	r3, [pc, #484]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	220c      	movs	r2, #12
 80010dc:	4013      	ands	r3, r2
 80010de:	d00b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e0:	4b76      	ldr	r3, [pc, #472]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	220c      	movs	r2, #12
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d11c      	bne.n	8001126 <HAL_RCC_OscConfig+0x196>
 80010ec:	4b73      	ldr	r3, [pc, #460]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	4013      	ands	r3, r2
 80010f6:	d116      	bne.n	8001126 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e24b      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	22f8      	movs	r2, #248	; 0xf8
 8001114:	4393      	bics	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	00da      	lsls	r2, r3, #3
 800111e:	4b67      	ldr	r3, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001120:	430a      	orrs	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001124:	e041      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d024      	beq.n	8001178 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b62      	ldr	r3, [pc, #392]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fcb9 	bl	8000ab0 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001144:	f7ff fcb4 	bl	8000ab0 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e227      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2202      	movs	r2, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d0f1      	beq.n	8001144 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001160:	4b56      	ldr	r3, [pc, #344]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	22f8      	movs	r2, #248	; 0xf8
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00da      	lsls	r2, r3, #3
 8001170:	4b52      	ldr	r3, [pc, #328]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	e018      	b.n	80011aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001178:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fc94 	bl	8000ab0 <HAL_GetTick>
 8001188:	0003      	movs	r3, r0
 800118a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800118e:	f7ff fc8f 	bl	8000ab0 <HAL_GetTick>
 8001192:	0002      	movs	r2, r0
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e202      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2202      	movs	r2, #2
 80011a6:	4013      	ands	r3, r2
 80011a8:	d1f1      	bne.n	800118e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2208      	movs	r2, #8
 80011b0:	4013      	ands	r3, r2
 80011b2:	d036      	beq.n	8001222 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d019      	beq.n	80011f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c0:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fc72 	bl	8000ab0 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff fc6d 	bl	8000ab0 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1e0      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d0f1      	beq.n	80011d2 <HAL_RCC_OscConfig+0x242>
 80011ee:	e018      	b.n	8001222 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f4:	4b31      	ldr	r3, [pc, #196]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	438a      	bics	r2, r1
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fc:	f7ff fc58 	bl	8000ab0 <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001206:	f7ff fc53 	bl	8000ab0 <HAL_GetTick>
 800120a:	0002      	movs	r2, r0
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e1c6      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	2202      	movs	r2, #2
 800121e:	4013      	ands	r3, r2
 8001220:	d1f1      	bne.n	8001206 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2204      	movs	r2, #4
 8001228:	4013      	ands	r3, r2
 800122a:	d100      	bne.n	800122e <HAL_RCC_OscConfig+0x29e>
 800122c:	e0b4      	b.n	8001398 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122e:	201f      	movs	r0, #31
 8001230:	183b      	adds	r3, r7, r0
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001238:	69da      	ldr	r2, [r3, #28]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	055b      	lsls	r3, r3, #21
 800123e:	4013      	ands	r3, r2
 8001240:	d110      	bne.n	8001264 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0549      	lsls	r1, r1, #21
 800124c:	430a      	orrs	r2, r1
 800124e:	61da      	str	r2, [r3, #28]
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	055b      	lsls	r3, r3, #21
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800125e:	183b      	adds	r3, r7, r0
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d11a      	bne.n	80012a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001270:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0049      	lsls	r1, r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127e:	f7ff fc17 	bl	8000ab0 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001288:	f7ff fc12 	bl	8000ab0 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e185      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_OscConfig+0x338>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10e      	bne.n	80012cc <HAL_RCC_OscConfig+0x33c>
 80012ae:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_RCC_OscConfig+0x32c>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	621a      	str	r2, [r3, #32]
 80012ba:	e035      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	fffeffff 	.word	0xfffeffff
 80012c4:	fffbffff 	.word	0xfffbffff
 80012c8:	40007000 	.word	0x40007000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <HAL_RCC_OscConfig+0x35e>
 80012d4:	4bb6      	ldr	r3, [pc, #728]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4bb5      	ldr	r3, [pc, #724]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	621a      	str	r2, [r3, #32]
 80012e0:	4bb3      	ldr	r3, [pc, #716]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012e2:	6a1a      	ldr	r2, [r3, #32]
 80012e4:	4bb2      	ldr	r3, [pc, #712]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012e6:	2104      	movs	r1, #4
 80012e8:	438a      	bics	r2, r1
 80012ea:	621a      	str	r2, [r3, #32]
 80012ec:	e01c      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0x380>
 80012f6:	4bae      	ldr	r3, [pc, #696]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012f8:	6a1a      	ldr	r2, [r3, #32]
 80012fa:	4bad      	ldr	r3, [pc, #692]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80012fc:	2104      	movs	r1, #4
 80012fe:	430a      	orrs	r2, r1
 8001300:	621a      	str	r2, [r3, #32]
 8001302:	4bab      	ldr	r3, [pc, #684]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001304:	6a1a      	ldr	r2, [r3, #32]
 8001306:	4baa      	ldr	r3, [pc, #680]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001308:	2101      	movs	r1, #1
 800130a:	430a      	orrs	r2, r1
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0x398>
 8001310:	4ba7      	ldr	r3, [pc, #668]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	4ba6      	ldr	r3, [pc, #664]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001316:	2101      	movs	r1, #1
 8001318:	438a      	bics	r2, r1
 800131a:	621a      	str	r2, [r3, #32]
 800131c:	4ba4      	ldr	r3, [pc, #656]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	4ba3      	ldr	r3, [pc, #652]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001322:	2104      	movs	r1, #4
 8001324:	438a      	bics	r2, r1
 8001326:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d014      	beq.n	800135a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001330:	f7ff fbbe 	bl	8000ab0 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001338:	e009      	b.n	800134e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fbb9 	bl	8000ab0 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a9b      	ldr	r2, [pc, #620]	; (80015b4 <HAL_RCC_OscConfig+0x624>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e12b      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800134e:	4b98      	ldr	r3, [pc, #608]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x3aa>
 8001358:	e013      	b.n	8001382 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fba9 	bl	8000ab0 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	e009      	b.n	8001378 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fba4 	bl	8000ab0 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a91      	ldr	r2, [pc, #580]	; (80015b4 <HAL_RCC_OscConfig+0x624>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e116      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001378:	4b8d      	ldr	r3, [pc, #564]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	2202      	movs	r2, #2
 800137e:	4013      	ands	r3, r2
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001382:	231f      	movs	r3, #31
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001392:	4989      	ldr	r1, [pc, #548]	; (80015b8 <HAL_RCC_OscConfig+0x628>)
 8001394:	400a      	ands	r2, r1
 8001396:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2210      	movs	r2, #16
 800139e:	4013      	ands	r3, r2
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d12a      	bne.n	8001400 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013aa:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ae:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013b0:	2104      	movs	r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013b6:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ba:	4b7d      	ldr	r3, [pc, #500]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb75 	bl	8000ab0 <HAL_GetTick>
 80013c6:	0003      	movs	r3, r0
 80013c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013cc:	f7ff fb70 	bl	8000ab0 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e0e3      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013de:	4b74      	ldr	r3, [pc, #464]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d0f1      	beq.n	80013cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013e8:	4b71      	ldr	r3, [pc, #452]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	22f8      	movs	r2, #248	; 0xf8
 80013ee:	4393      	bics	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	4b6d      	ldr	r3, [pc, #436]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	; 0x34
 80013fe:	e034      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	3305      	adds	r3, #5
 8001406:	d111      	bne.n	800142c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001408:	4b69      	ldr	r3, [pc, #420]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800140a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800140e:	2104      	movs	r1, #4
 8001410:	438a      	bics	r2, r1
 8001412:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001414:	4b66      	ldr	r3, [pc, #408]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	22f8      	movs	r2, #248	; 0xf8
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	00da      	lsls	r2, r3, #3
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	; 0x34
 800142a:	e01e      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142c:	4b60      	ldr	r3, [pc, #384]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800142e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001430:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001432:	2104      	movs	r1, #4
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001438:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800143a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143c:	4b5c      	ldr	r3, [pc, #368]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800143e:	2101      	movs	r1, #1
 8001440:	438a      	bics	r2, r1
 8001442:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fb34 	bl	8000ab0 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800144e:	f7ff fb2f 	bl	8000ab0 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e0a2      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	2202      	movs	r2, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d1f1      	bne.n	800144e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <HAL_RCC_OscConfig+0x4e4>
 8001472:	e097      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001474:	4b4e      	ldr	r3, [pc, #312]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	220c      	movs	r2, #12
 800147a:	4013      	ands	r3, r2
 800147c:	2b08      	cmp	r3, #8
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x4f2>
 8001480:	e06b      	b.n	800155a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d14c      	bne.n	8001524 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001490:	494a      	ldr	r1, [pc, #296]	; (80015bc <HAL_RCC_OscConfig+0x62c>)
 8001492:	400a      	ands	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001496:	f7ff fb0b 	bl	8000ab0 <HAL_GetTick>
 800149a:	0003      	movs	r3, r0
 800149c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fb06 	bl	8000ab0 <HAL_GetTick>
 80014a4:	0002      	movs	r2, r0
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e079      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	049b      	lsls	r3, r3, #18
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014be:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	220f      	movs	r2, #15
 80014c4:	4393      	bics	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014cc:	4b38      	ldr	r3, [pc, #224]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014ce:	430a      	orrs	r2, r1
 80014d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4a3a      	ldr	r2, [pc, #232]	; (80015c0 <HAL_RCC_OscConfig+0x630>)
 80014d8:	4013      	ands	r3, r2
 80014da:	0019      	movs	r1, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	431a      	orrs	r2, r3
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0449      	lsls	r1, r1, #17
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fad9 	bl	8000ab0 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fad4 	bl	8000ab0 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e047      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001516:	4b26      	ldr	r3, [pc, #152]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	049b      	lsls	r3, r3, #18
 800151e:	4013      	ands	r3, r2
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x574>
 8001522:	e03f      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800152a:	4924      	ldr	r1, [pc, #144]	; (80015bc <HAL_RCC_OscConfig+0x62c>)
 800152c:	400a      	ands	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fabe 	bl	8000ab0 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fab9 	bl	8000ab0 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e02c      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	049b      	lsls	r3, r3, #18
 8001554:	4013      	ands	r3, r2
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x5aa>
 8001558:	e024      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e01f      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_RCC_OscConfig+0x620>)
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	025b      	lsls	r3, r3, #9
 8001578:	401a      	ands	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	429a      	cmp	r2, r3
 8001580:	d10e      	bne.n	80015a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	220f      	movs	r2, #15
 8001586:	401a      	ands	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	23f0      	movs	r3, #240	; 0xf0
 8001594:	039b      	lsls	r3, r3, #14
 8001596:	401a      	ands	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b008      	add	sp, #32
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	00001388 	.word	0x00001388
 80015b8:	efffffff 	.word	0xefffffff
 80015bc:	feffffff 	.word	0xfeffffff
 80015c0:	ffc2ffff 	.word	0xffc2ffff

080015c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b3      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d911      	bls.n	800160a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b58      	ldr	r3, [pc, #352]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4393      	bics	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d001      	beq.n	800160a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e09a      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d015      	beq.n	8001640 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2204      	movs	r2, #4
 800161a:	4013      	ands	r3, r2
 800161c:	d006      	beq.n	800162c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800161e:	4b4b      	ldr	r3, [pc, #300]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001624:	21e0      	movs	r1, #224	; 0xe0
 8001626:	00c9      	lsls	r1, r1, #3
 8001628:	430a      	orrs	r2, r1
 800162a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	22f0      	movs	r2, #240	; 0xf0
 8001632:	4393      	bics	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	4b44      	ldr	r3, [pc, #272]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	d040      	beq.n	80016cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b3e      	ldr	r3, [pc, #248]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	029b      	lsls	r3, r3, #10
 800165a:	4013      	ands	r3, r2
 800165c:	d114      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e06e      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d108      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e062      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e05b      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	4393      	bics	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fa08 	bl	8000ab0 <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff fa03 	bl	8000ab0 <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_RCC_ClockConfig+0x18c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e042      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	220c      	movs	r2, #12
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1ec      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d211      	bcs.n	80016fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_RCC_ClockConfig+0x184>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e020      	b.n	8001740 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2204      	movs	r2, #4
 8001704:	4013      	ands	r3, r2
 8001706:	d009      	beq.n	800171c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <HAL_RCC_ClockConfig+0x190>)
 800170e:	4013      	ands	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001718:	430a      	orrs	r2, r1
 800171a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800171c:	f000 f820 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8001720:	0001      	movs	r1, r0
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_RCC_ClockConfig+0x188>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	091b      	lsrs	r3, r3, #4
 8001728:	220f      	movs	r2, #15
 800172a:	4013      	ands	r3, r2
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_RCC_ClockConfig+0x194>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	000a      	movs	r2, r1
 8001732:	40da      	lsrs	r2, r3
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <HAL_RCC_ClockConfig+0x198>)
 8001736:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff f973 	bl	8000a24 <HAL_InitTick>
  
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b004      	add	sp, #16
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40022000 	.word	0x40022000
 800174c:	40021000 	.word	0x40021000
 8001750:	00001388 	.word	0x00001388
 8001754:	fffff8ff 	.word	0xfffff8ff
 8001758:	08003784 	.word	0x08003784
 800175c:	20000000 	.word	0x20000000

08001760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b08f      	sub	sp, #60	; 0x3c
 8001764:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001766:	2314      	movs	r3, #20
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <HAL_RCC_GetSysClockFreq+0xb8>)
 800176c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800176e:	c313      	stmia	r3!, {r0, r1, r4}
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001778:	ca13      	ldmia	r2!, {r0, r1, r4}
 800177a:	c313      	stmia	r3!, {r0, r1, r4}
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	220c      	movs	r2, #12
 800179e:	4013      	ands	r3, r2
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d002      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x4a>
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d003      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x50>
 80017a8:	e02d      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ae:	e02d      	b.n	800180c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	0c9b      	lsrs	r3, r3, #18
 80017b4:	220f      	movs	r2, #15
 80017b6:	4013      	ands	r3, r2
 80017b8:	2214      	movs	r2, #20
 80017ba:	18ba      	adds	r2, r7, r2
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	220f      	movs	r2, #15
 80017c6:	4013      	ands	r3, r2
 80017c8:	1d3a      	adds	r2, r7, #4
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	4013      	ands	r3, r2
 80017d6:	d009      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017da:	4812      	ldr	r0, [pc, #72]	; (8001824 <HAL_RCC_GetSysClockFreq+0xc4>)
 80017dc:	f7fe fc9e 	bl	800011c <__udivsi3>
 80017e0:	0003      	movs	r3, r0
 80017e2:	001a      	movs	r2, r3
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	4353      	muls	r3, r2
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ea:	e009      	b.n	8001800 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80017ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ee:	000a      	movs	r2, r1
 80017f0:	0152      	lsls	r2, r2, #5
 80017f2:	1a52      	subs	r2, r2, r1
 80017f4:	0193      	lsls	r3, r2, #6
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	185b      	adds	r3, r3, r1
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001804:	e002      	b.n	800180c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800180a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b00f      	add	sp, #60	; 0x3c
 8001814:	bd90      	pop	{r4, r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	08003764 	.word	0x08003764
 800181c:	08003774 	.word	0x08003774
 8001820:	40021000 	.word	0x40021000
 8001824:	007a1200 	.word	0x007a1200

08001828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <HAL_RCC_GetHCLKFreq+0x10>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	20000000 	.word	0x20000000

0800183c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001840:	f7ff fff2 	bl	8001828 <HAL_RCC_GetHCLKFreq>
 8001844:	0001      	movs	r1, r0
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	2207      	movs	r2, #7
 800184e:	4013      	ands	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	40d9      	lsrs	r1, r3
 8001856:	000b      	movs	r3, r1
}    
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	40021000 	.word	0x40021000
 8001864:	08003794 	.word	0x08003794

08001868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	025b      	lsls	r3, r3, #9
 8001880:	4013      	ands	r3, r2
 8001882:	d100      	bne.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001884:	e08e      	b.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2017      	movs	r0, #23
 8001888:	183b      	adds	r3, r7, r0
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	055b      	lsls	r3, r3, #21
 8001896:	4013      	ands	r3, r2
 8001898:	d110      	bne.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0549      	lsls	r1, r1, #21
 80018a4:	430a      	orrs	r2, r1
 80018a6:	61da      	str	r2, [r3, #28]
 80018a8:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80018aa:	69da      	ldr	r2, [r3, #28]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	055b      	lsls	r3, r3, #21
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018b6:	183b      	adds	r3, r7, r0
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b54      	ldr	r3, [pc, #336]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4013      	ands	r3, r2
 80018c6:	d11a      	bne.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80018ce:	2180      	movs	r1, #128	; 0x80
 80018d0:	0049      	lsls	r1, r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f8eb 	bl	8000ab0 <HAL_GetTick>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	e008      	b.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e0:	f7ff f8e6 	bl	8000ab0 <HAL_GetTick>
 80018e4:	0002      	movs	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e087      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4013      	ands	r3, r2
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018fe:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	23c0      	movs	r3, #192	; 0xc0
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d034      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	23c0      	movs	r3, #192	; 0xc0
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4013      	ands	r3, r2
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d02c      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001920:	4b3a      	ldr	r3, [pc, #232]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a3b      	ldr	r2, [pc, #236]	; (8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001926:	4013      	ands	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800192c:	6a1a      	ldr	r2, [r3, #32]
 800192e:	4b37      	ldr	r3, [pc, #220]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0249      	lsls	r1, r1, #9
 8001934:	430a      	orrs	r2, r1
 8001936:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800193e:	4936      	ldr	r1, [pc, #216]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001940:	400a      	ands	r2, r1
 8001942:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff f8ad 	bl	8000ab0 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	e009      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f8a8 	bl	8000ab0 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e048      	b.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d0f0      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001980:	4013      	ands	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800198a:	430a      	orrs	r2, r1
 800198c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800198e:	2317      	movs	r3, #23
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800199e:	4920      	ldr	r1, [pc, #128]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80019a0:	400a      	ands	r2, r1
 80019a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4013      	ands	r3, r2
 80019ac:	d009      	beq.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	2203      	movs	r2, #3
 80019b4:	4393      	bics	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2220      	movs	r2, #32
 80019c8:	4013      	ands	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	2210      	movs	r2, #16
 80019d2:	4393      	bics	r3, r2
 80019d4:	0019      	movs	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019dc:	430a      	orrs	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4013      	ands	r3, r2
 80019ea:	d009      	beq.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	2240      	movs	r2, #64	; 0x40
 80019f2:	4393      	bics	r3, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019fc:	430a      	orrs	r2, r1
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b006      	add	sp, #24
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
 8001a14:	fffffcff 	.word	0xfffffcff
 8001a18:	fffeffff 	.word	0xfffeffff
 8001a1c:	00001388 	.word	0x00001388
 8001a20:	efffffff 	.word	0xefffffff

08001a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e044      	b.n	8001ac0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d107      	bne.n	8001a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2274      	movs	r2, #116	; 0x74
 8001a42:	2100      	movs	r1, #0
 8001a44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7fe fe85 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2224      	movs	r2, #36	; 0x24
 8001a52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2101      	movs	r1, #1
 8001a60:	438a      	bics	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f8da 	bl	8001c20 <UART_SetConfig>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e024      	b.n	8001ac0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fa0d 	bl	8001ea0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <HAL_UART_Init+0xa4>)
 8001a92:	400a      	ands	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	212a      	movs	r1, #42	; 0x2a
 8001aa2:	438a      	bics	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f000 faa5 	bl	8002008 <UART_CheckIdleState>
 8001abe:	0003      	movs	r3, r0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	ffffb7ff 	.word	0xffffb7ff

08001acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	1dbb      	adds	r3, r7, #6
 8001ada:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d000      	beq.n	8001ae6 <HAL_UART_Transmit+0x1a>
 8001ae4:	e096      	b.n	8001c14 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_UART_Transmit+0x28>
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e08e      	b.n	8001c16 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d109      	bne.n	8001b18 <HAL_UART_Transmit+0x4c>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4013      	ands	r3, r2
 8001b12:	d001      	beq.n	8001b18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e07e      	b.n	8001c16 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2274      	movs	r2, #116	; 0x74
 8001b1c:	5c9b      	ldrb	r3, [r3, r2]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_UART_Transmit+0x5a>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e077      	b.n	8001c16 <HAL_UART_Transmit+0x14a>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2274      	movs	r2, #116	; 0x74
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	2100      	movs	r1, #0
 8001b34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2221      	movs	r2, #33	; 0x21
 8001b3a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b3c:	f7fe ffb8 	bl	8000ab0 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1dba      	adds	r2, r7, #6
 8001b48:	2150      	movs	r1, #80	; 0x50
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1dba      	adds	r2, r7, #6
 8001b52:	2152      	movs	r1, #82	; 0x52
 8001b54:	8812      	ldrh	r2, [r2, #0]
 8001b56:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	015b      	lsls	r3, r3, #5
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d108      	bne.n	8001b76 <HAL_UART_Transmit+0xaa>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d104      	bne.n	8001b76 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	e003      	b.n	8001b7e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2274      	movs	r2, #116	; 0x74
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001b86:	e02d      	b.n	8001be4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	0013      	movs	r3, r2
 8001b92:	2200      	movs	r2, #0
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	f000 fa7f 	bl	8002098 <UART_WaitOnFlagUntilTimeout>
 8001b9a:	1e03      	subs	r3, r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e039      	b.n	8001c16 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	881a      	ldrh	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	05d2      	lsls	r2, r2, #23
 8001bb2:	0dd2      	lsrs	r2, r2, #23
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	3302      	adds	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	e008      	b.n	8001bd2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	781a      	ldrb	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b292      	uxth	r2, r2
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2252      	movs	r2, #82	; 0x52
 8001bd6:	5a9b      	ldrh	r3, [r3, r2]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b299      	uxth	r1, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2252      	movs	r2, #82	; 0x52
 8001be2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2252      	movs	r2, #82	; 0x52
 8001be8:	5a9b      	ldrh	r3, [r3, r2]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1cb      	bne.n	8001b88 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2140      	movs	r1, #64	; 0x40
 8001bfe:	f000 fa4b 	bl	8002098 <UART_WaitOnFlagUntilTimeout>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e005      	b.n	8001c16 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
  }
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b008      	add	sp, #32
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c28:	231e      	movs	r3, #30
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a8d      	ldr	r2, [pc, #564]	; (8001e84 <UART_SetConfig+0x264>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a88      	ldr	r2, [pc, #544]	; (8001e88 <UART_SetConfig+0x268>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a7f      	ldr	r2, [pc, #508]	; (8001e8c <UART_SetConfig+0x26c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a7b      	ldr	r2, [pc, #492]	; (8001e90 <UART_SetConfig+0x270>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d127      	bne.n	8001cf6 <UART_SetConfig+0xd6>
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <UART_SetConfig+0x274>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	2203      	movs	r2, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d00d      	beq.n	8001cce <UART_SetConfig+0xae>
 8001cb2:	d81b      	bhi.n	8001cec <UART_SetConfig+0xcc>
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d014      	beq.n	8001ce2 <UART_SetConfig+0xc2>
 8001cb8:	d818      	bhi.n	8001cec <UART_SetConfig+0xcc>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <UART_SetConfig+0xa4>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d00a      	beq.n	8001cd8 <UART_SetConfig+0xb8>
 8001cc2:	e013      	b.n	8001cec <UART_SetConfig+0xcc>
 8001cc4:	231f      	movs	r3, #31
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e021      	b.n	8001d12 <UART_SetConfig+0xf2>
 8001cce:	231f      	movs	r3, #31
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e01c      	b.n	8001d12 <UART_SetConfig+0xf2>
 8001cd8:	231f      	movs	r3, #31
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2204      	movs	r2, #4
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e017      	b.n	8001d12 <UART_SetConfig+0xf2>
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e012      	b.n	8001d12 <UART_SetConfig+0xf2>
 8001cec:	231f      	movs	r3, #31
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	e00d      	b.n	8001d12 <UART_SetConfig+0xf2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <UART_SetConfig+0x278>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d104      	bne.n	8001d0a <UART_SetConfig+0xea>
 8001d00:	231f      	movs	r3, #31
 8001d02:	18fb      	adds	r3, r7, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e003      	b.n	8001d12 <UART_SetConfig+0xf2>
 8001d0a:	231f      	movs	r3, #31
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2210      	movs	r2, #16
 8001d10:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d15d      	bne.n	8001dda <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001d1e:	231f      	movs	r3, #31
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d015      	beq.n	8001d54 <UART_SetConfig+0x134>
 8001d28:	dc18      	bgt.n	8001d5c <UART_SetConfig+0x13c>
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d00d      	beq.n	8001d4a <UART_SetConfig+0x12a>
 8001d2e:	dc15      	bgt.n	8001d5c <UART_SetConfig+0x13c>
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <UART_SetConfig+0x11a>
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d005      	beq.n	8001d44 <UART_SetConfig+0x124>
 8001d38:	e010      	b.n	8001d5c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001d3a:	f7ff fd7f 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	61bb      	str	r3, [r7, #24]
        break;
 8001d42:	e012      	b.n	8001d6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001d44:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <UART_SetConfig+0x27c>)
 8001d46:	61bb      	str	r3, [r7, #24]
        break;
 8001d48:	e00f      	b.n	8001d6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d4a:	f7ff fd09 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8001d4e:	0003      	movs	r3, r0
 8001d50:	61bb      	str	r3, [r7, #24]
        break;
 8001d52:	e00a      	b.n	8001d6a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	61bb      	str	r3, [r7, #24]
        break;
 8001d5a:	e006      	b.n	8001d6a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001d60:	231e      	movs	r3, #30
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
        break;
 8001d68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d100      	bne.n	8001d72 <UART_SetConfig+0x152>
 8001d70:	e07b      	b.n	8001e6a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	005a      	lsls	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	085b      	lsrs	r3, r3, #1
 8001d7c:	18d2      	adds	r2, r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0019      	movs	r1, r3
 8001d84:	0010      	movs	r0, r2
 8001d86:	f7fe f9c9 	bl	800011c <__udivsi3>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	d91c      	bls.n	8001dd0 <UART_SetConfig+0x1b0>
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d217      	bcs.n	8001dd0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	200e      	movs	r0, #14
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	210f      	movs	r1, #15
 8001daa:	438a      	bics	r2, r1
 8001dac:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2207      	movs	r2, #7
 8001db6:	4013      	ands	r3, r2
 8001db8:	b299      	uxth	r1, r3
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	183a      	adds	r2, r7, r0
 8001dbe:	8812      	ldrh	r2, [r2, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	183a      	adds	r2, r7, r0
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	e04c      	b.n	8001e6a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001dd0:	231e      	movs	r3, #30
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e047      	b.n	8001e6a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001dda:	231f      	movs	r3, #31
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d015      	beq.n	8001e10 <UART_SetConfig+0x1f0>
 8001de4:	dc18      	bgt.n	8001e18 <UART_SetConfig+0x1f8>
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d00d      	beq.n	8001e06 <UART_SetConfig+0x1e6>
 8001dea:	dc15      	bgt.n	8001e18 <UART_SetConfig+0x1f8>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <UART_SetConfig+0x1d6>
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d005      	beq.n	8001e00 <UART_SetConfig+0x1e0>
 8001df4:	e010      	b.n	8001e18 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001df6:	f7ff fd21 	bl	800183c <HAL_RCC_GetPCLK1Freq>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	61bb      	str	r3, [r7, #24]
        break;
 8001dfe:	e012      	b.n	8001e26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <UART_SetConfig+0x27c>)
 8001e02:	61bb      	str	r3, [r7, #24]
        break;
 8001e04:	e00f      	b.n	8001e26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e06:	f7ff fcab 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	61bb      	str	r3, [r7, #24]
        break;
 8001e0e:	e00a      	b.n	8001e26 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	61bb      	str	r3, [r7, #24]
        break;
 8001e16:	e006      	b.n	8001e26 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e1c:	231e      	movs	r3, #30
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
        break;
 8001e24:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01e      	beq.n	8001e6a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	085a      	lsrs	r2, r3, #1
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	18d2      	adds	r2, r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	0010      	movs	r0, r2
 8001e3e:	f7fe f96d 	bl	800011c <__udivsi3>
 8001e42:	0003      	movs	r3, r0
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b0f      	cmp	r3, #15
 8001e4c:	d909      	bls.n	8001e62 <UART_SetConfig+0x242>
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	025b      	lsls	r3, r3, #9
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d204      	bcs.n	8001e62 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	e003      	b.n	8001e6a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001e62:	231e      	movs	r3, #30
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001e76:	231e      	movs	r3, #30
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	781b      	ldrb	r3, [r3, #0]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b008      	add	sp, #32
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	ffff69f3 	.word	0xffff69f3
 8001e88:	ffffcfff 	.word	0xffffcfff
 8001e8c:	fffff4ff 	.word	0xfffff4ff
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	007a1200 	.word	0x007a1200

08001ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a4a      	ldr	r2, [pc, #296]	; (8001fe4 <UART_AdvFeatureConfig+0x144>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2202      	movs	r2, #2
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d00b      	beq.n	8001eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4a43      	ldr	r2, [pc, #268]	; (8001fe8 <UART_AdvFeatureConfig+0x148>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d00b      	beq.n	8001f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <UART_AdvFeatureConfig+0x14c>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	2208      	movs	r2, #8
 8001f14:	4013      	ands	r3, r2
 8001f16:	d00b      	beq.n	8001f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <UART_AdvFeatureConfig+0x150>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	2210      	movs	r2, #16
 8001f36:	4013      	ands	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <UART_AdvFeatureConfig+0x154>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	2220      	movs	r2, #32
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d00b      	beq.n	8001f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	4a25      	ldr	r2, [pc, #148]	; (8001ff8 <UART_AdvFeatureConfig+0x158>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d01d      	beq.n	8001fba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <UART_AdvFeatureConfig+0x15c>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	035b      	lsls	r3, r3, #13
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d10b      	bne.n	8001fba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a15      	ldr	r2, [pc, #84]	; (8002000 <UART_AdvFeatureConfig+0x160>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d00b      	beq.n	8001fdc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <UART_AdvFeatureConfig+0x164>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
  }
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	fffdffff 	.word	0xfffdffff
 8001fe8:	fffeffff 	.word	0xfffeffff
 8001fec:	fffbffff 	.word	0xfffbffff
 8001ff0:	ffff7fff 	.word	0xffff7fff
 8001ff4:	ffffefff 	.word	0xffffefff
 8001ff8:	ffffdfff 	.word	0xffffdfff
 8001ffc:	ffefffff 	.word	0xffefffff
 8002000:	ff9fffff 	.word	0xff9fffff
 8002004:	fff7ffff 	.word	0xfff7ffff

08002008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af02      	add	r7, sp, #8
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	2100      	movs	r1, #0
 8002016:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002018:	f7fe fd4a 	bl	8000ab0 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2208      	movs	r2, #8
 8002028:	4013      	ands	r3, r2
 800202a:	2b08      	cmp	r3, #8
 800202c:	d10c      	bne.n	8002048 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	0391      	lsls	r1, r2, #14
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <UART_CheckIdleState+0x8c>)
 8002038:	9200      	str	r2, [sp, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	f000 f82c 	bl	8002098 <UART_WaitOnFlagUntilTimeout>
 8002040:	1e03      	subs	r3, r0, #0
 8002042:	d001      	beq.n	8002048 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e021      	b.n	800208c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2204      	movs	r2, #4
 8002050:	4013      	ands	r3, r2
 8002052:	2b04      	cmp	r3, #4
 8002054:	d10c      	bne.n	8002070 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	03d1      	lsls	r1, r2, #15
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <UART_CheckIdleState+0x8c>)
 8002060:	9200      	str	r2, [sp, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	f000 f818 	bl	8002098 <UART_WaitOnFlagUntilTimeout>
 8002068:	1e03      	subs	r3, r0, #0
 800206a:	d001      	beq.n	8002070 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e00d      	b.n	800208c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2220      	movs	r2, #32
 800207a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2274      	movs	r2, #116	; 0x74
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}
 8002094:	01ffffff 	.word	0x01ffffff

08002098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b094      	sub	sp, #80	; 0x50
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a8:	e0a3      	b.n	80021f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ac:	3301      	adds	r3, #1
 80020ae:	d100      	bne.n	80020b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80020b0:	e09f      	b.n	80021f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020b2:	f7fe fcfd 	bl	8000ab0 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020be:	429a      	cmp	r2, r3
 80020c0:	d302      	bcc.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80020c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d13d      	bne.n	8002144 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020c8:	f3ef 8310 	mrs	r3, PRIMASK
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80020ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
 80020d2:	2301      	movs	r3, #1
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	f383 8810 	msr	PRIMASK, r3
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	494c      	ldr	r1, [pc, #304]	; (800221c <UART_WaitOnFlagUntilTimeout+0x184>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f4:	f383 8810 	msr	PRIMASK, r3
}
 80020f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020fa:	f3ef 8310 	mrs	r3, PRIMASK
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
 8002104:	2301      	movs	r3, #1
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	f383 8810 	msr	PRIMASK, r3
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2101      	movs	r1, #1
 800211c:	438a      	bics	r2, r1
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	f383 8810 	msr	PRIMASK, r3
}
 800212a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2274      	movs	r2, #116	; 0x74
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e067      	b.n	8002214 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2204      	movs	r2, #4
 800214c:	4013      	ands	r3, r2
 800214e:	d050      	beq.n	80021f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	401a      	ands	r2, r3
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	429a      	cmp	r2, r3
 8002162:	d146      	bne.n	80021f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800216e:	f3ef 8310 	mrs	r3, PRIMASK
 8002172:	613b      	str	r3, [r7, #16]
  return(result);
 8002174:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002178:	2301      	movs	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f383 8810 	msr	PRIMASK, r3
}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4923      	ldr	r1, [pc, #140]	; (800221c <UART_WaitOnFlagUntilTimeout+0x184>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002196:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f383 8810 	msr	PRIMASK, r3
}
 800219e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021a0:	f3ef 8310 	mrs	r3, PRIMASK
 80021a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80021a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021aa:	2301      	movs	r3, #1
 80021ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	f383 8810 	msr	PRIMASK, r3
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	438a      	bics	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	f383 8810 	msr	PRIMASK, r3
}
 80021d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	2120      	movs	r1, #32
 80021e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2274      	movs	r2, #116	; 0x74
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e010      	b.n	8002214 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	4013      	ands	r3, r2
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	425a      	negs	r2, r3
 8002202:	4153      	adcs	r3, r2
 8002204:	b2db      	uxtb	r3, r3
 8002206:	001a      	movs	r2, r3
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d100      	bne.n	8002212 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002210:	e74b      	b.n	80020aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b014      	add	sp, #80	; 0x50
 800221a:	bd80      	pop	{r7, pc}
 800221c:	fffffe5f 	.word	0xfffffe5f

08002220 <__errno>:
 8002220:	4b01      	ldr	r3, [pc, #4]	; (8002228 <__errno+0x8>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	4770      	bx	lr
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	2000000c 	.word	0x2000000c

0800222c <__libc_init_array>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	2600      	movs	r6, #0
 8002230:	4d0c      	ldr	r5, [pc, #48]	; (8002264 <__libc_init_array+0x38>)
 8002232:	4c0d      	ldr	r4, [pc, #52]	; (8002268 <__libc_init_array+0x3c>)
 8002234:	1b64      	subs	r4, r4, r5
 8002236:	10a4      	asrs	r4, r4, #2
 8002238:	42a6      	cmp	r6, r4
 800223a:	d109      	bne.n	8002250 <__libc_init_array+0x24>
 800223c:	2600      	movs	r6, #0
 800223e:	f001 fa7d 	bl	800373c <_init>
 8002242:	4d0a      	ldr	r5, [pc, #40]	; (800226c <__libc_init_array+0x40>)
 8002244:	4c0a      	ldr	r4, [pc, #40]	; (8002270 <__libc_init_array+0x44>)
 8002246:	1b64      	subs	r4, r4, r5
 8002248:	10a4      	asrs	r4, r4, #2
 800224a:	42a6      	cmp	r6, r4
 800224c:	d105      	bne.n	800225a <__libc_init_array+0x2e>
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	00b3      	lsls	r3, r6, #2
 8002252:	58eb      	ldr	r3, [r5, r3]
 8002254:	4798      	blx	r3
 8002256:	3601      	adds	r6, #1
 8002258:	e7ee      	b.n	8002238 <__libc_init_array+0xc>
 800225a:	00b3      	lsls	r3, r6, #2
 800225c:	58eb      	ldr	r3, [r5, r3]
 800225e:	4798      	blx	r3
 8002260:	3601      	adds	r6, #1
 8002262:	e7f2      	b.n	800224a <__libc_init_array+0x1e>
 8002264:	080038e4 	.word	0x080038e4
 8002268:	080038e4 	.word	0x080038e4
 800226c:	080038e4 	.word	0x080038e4
 8002270:	080038e8 	.word	0x080038e8

08002274 <memset>:
 8002274:	0003      	movs	r3, r0
 8002276:	1882      	adds	r2, r0, r2
 8002278:	4293      	cmp	r3, r2
 800227a:	d100      	bne.n	800227e <memset+0xa>
 800227c:	4770      	bx	lr
 800227e:	7019      	strb	r1, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	e7f9      	b.n	8002278 <memset+0x4>

08002284 <rand>:
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <rand+0x5c>)
 8002286:	b510      	push	{r4, lr}
 8002288:	681c      	ldr	r4, [r3, #0]
 800228a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800228c:	2b00      	cmp	r3, #0
 800228e:	d116      	bne.n	80022be <rand+0x3a>
 8002290:	2018      	movs	r0, #24
 8002292:	f000 f883 	bl	800239c <malloc>
 8002296:	1e02      	subs	r2, r0, #0
 8002298:	63a0      	str	r0, [r4, #56]	; 0x38
 800229a:	d104      	bne.n	80022a6 <rand+0x22>
 800229c:	214e      	movs	r1, #78	; 0x4e
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <rand+0x60>)
 80022a0:	4811      	ldr	r0, [pc, #68]	; (80022e8 <rand+0x64>)
 80022a2:	f000 f84d 	bl	8002340 <__assert_func>
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <rand+0x68>)
 80022a8:	2100      	movs	r1, #0
 80022aa:	6003      	str	r3, [r0, #0]
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <rand+0x6c>)
 80022ae:	6043      	str	r3, [r0, #4]
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <rand+0x70>)
 80022b2:	6083      	str	r3, [r0, #8]
 80022b4:	230b      	movs	r3, #11
 80022b6:	8183      	strh	r3, [r0, #12]
 80022b8:	2001      	movs	r0, #1
 80022ba:	6110      	str	r0, [r2, #16]
 80022bc:	6151      	str	r1, [r2, #20]
 80022be:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <rand+0x74>)
 80022c2:	6920      	ldr	r0, [r4, #16]
 80022c4:	6961      	ldr	r1, [r4, #20]
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <rand+0x78>)
 80022c8:	f7fe f89e 	bl	8000408 <__aeabi_lmul>
 80022cc:	2201      	movs	r2, #1
 80022ce:	2300      	movs	r3, #0
 80022d0:	1880      	adds	r0, r0, r2
 80022d2:	4159      	adcs	r1, r3
 80022d4:	6120      	str	r0, [r4, #16]
 80022d6:	6161      	str	r1, [r4, #20]
 80022d8:	0048      	lsls	r0, r1, #1
 80022da:	0840      	lsrs	r0, r0, #1
 80022dc:	bd10      	pop	{r4, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	2000000c 	.word	0x2000000c
 80022e4:	080037a0 	.word	0x080037a0
 80022e8:	080037b7 	.word	0x080037b7
 80022ec:	abcd330e 	.word	0xabcd330e
 80022f0:	e66d1234 	.word	0xe66d1234
 80022f4:	0005deec 	.word	0x0005deec
 80022f8:	4c957f2d 	.word	0x4c957f2d
 80022fc:	5851f42d 	.word	0x5851f42d

08002300 <siprintf>:
 8002300:	b40e      	push	{r1, r2, r3}
 8002302:	b500      	push	{lr}
 8002304:	490b      	ldr	r1, [pc, #44]	; (8002334 <siprintf+0x34>)
 8002306:	b09c      	sub	sp, #112	; 0x70
 8002308:	ab1d      	add	r3, sp, #116	; 0x74
 800230a:	9002      	str	r0, [sp, #8]
 800230c:	9006      	str	r0, [sp, #24]
 800230e:	9107      	str	r1, [sp, #28]
 8002310:	9104      	str	r1, [sp, #16]
 8002312:	4809      	ldr	r0, [pc, #36]	; (8002338 <siprintf+0x38>)
 8002314:	4909      	ldr	r1, [pc, #36]	; (800233c <siprintf+0x3c>)
 8002316:	cb04      	ldmia	r3!, {r2}
 8002318:	9105      	str	r1, [sp, #20]
 800231a:	6800      	ldr	r0, [r0, #0]
 800231c:	a902      	add	r1, sp, #8
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	f000 f98a 	bl	8002638 <_svfiprintf_r>
 8002324:	2300      	movs	r3, #0
 8002326:	9a02      	ldr	r2, [sp, #8]
 8002328:	7013      	strb	r3, [r2, #0]
 800232a:	b01c      	add	sp, #112	; 0x70
 800232c:	bc08      	pop	{r3}
 800232e:	b003      	add	sp, #12
 8002330:	4718      	bx	r3
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	7fffffff 	.word	0x7fffffff
 8002338:	2000000c 	.word	0x2000000c
 800233c:	ffff0208 	.word	0xffff0208

08002340 <__assert_func>:
 8002340:	b530      	push	{r4, r5, lr}
 8002342:	0014      	movs	r4, r2
 8002344:	001a      	movs	r2, r3
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <__assert_func+0x2c>)
 8002348:	0005      	movs	r5, r0
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	b085      	sub	sp, #20
 800234e:	68d8      	ldr	r0, [r3, #12]
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <__assert_func+0x30>)
 8002352:	2c00      	cmp	r4, #0
 8002354:	d101      	bne.n	800235a <__assert_func+0x1a>
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <__assert_func+0x34>)
 8002358:	001c      	movs	r4, r3
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	9100      	str	r1, [sp, #0]
 800235e:	002b      	movs	r3, r5
 8002360:	4905      	ldr	r1, [pc, #20]	; (8002378 <__assert_func+0x38>)
 8002362:	9402      	str	r4, [sp, #8]
 8002364:	f000 f80a 	bl	800237c <fiprintf>
 8002368:	f000 fe2a 	bl	8002fc0 <abort>
 800236c:	2000000c 	.word	0x2000000c
 8002370:	08003812 	.word	0x08003812
 8002374:	0800384d 	.word	0x0800384d
 8002378:	0800381f 	.word	0x0800381f

0800237c <fiprintf>:
 800237c:	b40e      	push	{r1, r2, r3}
 800237e:	b503      	push	{r0, r1, lr}
 8002380:	0001      	movs	r1, r0
 8002382:	ab03      	add	r3, sp, #12
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <fiprintf+0x1c>)
 8002386:	cb04      	ldmia	r3!, {r2}
 8002388:	6800      	ldr	r0, [r0, #0]
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	f000 fa7c 	bl	8002888 <_vfiprintf_r>
 8002390:	b002      	add	sp, #8
 8002392:	bc08      	pop	{r3}
 8002394:	b003      	add	sp, #12
 8002396:	4718      	bx	r3
 8002398:	2000000c 	.word	0x2000000c

0800239c <malloc>:
 800239c:	b510      	push	{r4, lr}
 800239e:	4b03      	ldr	r3, [pc, #12]	; (80023ac <malloc+0x10>)
 80023a0:	0001      	movs	r1, r0
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	f000 f870 	bl	8002488 <_malloc_r>
 80023a8:	bd10      	pop	{r4, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	2000000c 	.word	0x2000000c

080023b0 <_free_r>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	0005      	movs	r5, r0
 80023b4:	2900      	cmp	r1, #0
 80023b6:	d010      	beq.n	80023da <_free_r+0x2a>
 80023b8:	1f0c      	subs	r4, r1, #4
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da00      	bge.n	80023c2 <_free_r+0x12>
 80023c0:	18e4      	adds	r4, r4, r3
 80023c2:	0028      	movs	r0, r5
 80023c4:	f001 f86a 	bl	800349c <__malloc_lock>
 80023c8:	4a1d      	ldr	r2, [pc, #116]	; (8002440 <_free_r+0x90>)
 80023ca:	6813      	ldr	r3, [r2, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <_free_r+0x2c>
 80023d0:	6063      	str	r3, [r4, #4]
 80023d2:	6014      	str	r4, [r2, #0]
 80023d4:	0028      	movs	r0, r5
 80023d6:	f001 f869 	bl	80034ac <__malloc_unlock>
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	42a3      	cmp	r3, r4
 80023de:	d908      	bls.n	80023f2 <_free_r+0x42>
 80023e0:	6821      	ldr	r1, [r4, #0]
 80023e2:	1860      	adds	r0, r4, r1
 80023e4:	4283      	cmp	r3, r0
 80023e6:	d1f3      	bne.n	80023d0 <_free_r+0x20>
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	1841      	adds	r1, r0, r1
 80023ee:	6021      	str	r1, [r4, #0]
 80023f0:	e7ee      	b.n	80023d0 <_free_r+0x20>
 80023f2:	001a      	movs	r2, r3
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <_free_r+0x4e>
 80023fa:	42a3      	cmp	r3, r4
 80023fc:	d9f9      	bls.n	80023f2 <_free_r+0x42>
 80023fe:	6811      	ldr	r1, [r2, #0]
 8002400:	1850      	adds	r0, r2, r1
 8002402:	42a0      	cmp	r0, r4
 8002404:	d10b      	bne.n	800241e <_free_r+0x6e>
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	1809      	adds	r1, r1, r0
 800240a:	1850      	adds	r0, r2, r1
 800240c:	6011      	str	r1, [r2, #0]
 800240e:	4283      	cmp	r3, r0
 8002410:	d1e0      	bne.n	80023d4 <_free_r+0x24>
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	1841      	adds	r1, r0, r1
 8002418:	6011      	str	r1, [r2, #0]
 800241a:	6053      	str	r3, [r2, #4]
 800241c:	e7da      	b.n	80023d4 <_free_r+0x24>
 800241e:	42a0      	cmp	r0, r4
 8002420:	d902      	bls.n	8002428 <_free_r+0x78>
 8002422:	230c      	movs	r3, #12
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	e7d5      	b.n	80023d4 <_free_r+0x24>
 8002428:	6821      	ldr	r1, [r4, #0]
 800242a:	1860      	adds	r0, r4, r1
 800242c:	4283      	cmp	r3, r0
 800242e:	d103      	bne.n	8002438 <_free_r+0x88>
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	1841      	adds	r1, r0, r1
 8002436:	6021      	str	r1, [r4, #0]
 8002438:	6063      	str	r3, [r4, #4]
 800243a:	6054      	str	r4, [r2, #4]
 800243c:	e7ca      	b.n	80023d4 <_free_r+0x24>
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	20000118 	.word	0x20000118

08002444 <sbrk_aligned>:
 8002444:	b570      	push	{r4, r5, r6, lr}
 8002446:	4e0f      	ldr	r6, [pc, #60]	; (8002484 <sbrk_aligned+0x40>)
 8002448:	000d      	movs	r5, r1
 800244a:	6831      	ldr	r1, [r6, #0]
 800244c:	0004      	movs	r4, r0
 800244e:	2900      	cmp	r1, #0
 8002450:	d102      	bne.n	8002458 <sbrk_aligned+0x14>
 8002452:	f000 fcd5 	bl	8002e00 <_sbrk_r>
 8002456:	6030      	str	r0, [r6, #0]
 8002458:	0029      	movs	r1, r5
 800245a:	0020      	movs	r0, r4
 800245c:	f000 fcd0 	bl	8002e00 <_sbrk_r>
 8002460:	1c43      	adds	r3, r0, #1
 8002462:	d00a      	beq.n	800247a <sbrk_aligned+0x36>
 8002464:	2303      	movs	r3, #3
 8002466:	1cc5      	adds	r5, r0, #3
 8002468:	439d      	bics	r5, r3
 800246a:	42a8      	cmp	r0, r5
 800246c:	d007      	beq.n	800247e <sbrk_aligned+0x3a>
 800246e:	1a29      	subs	r1, r5, r0
 8002470:	0020      	movs	r0, r4
 8002472:	f000 fcc5 	bl	8002e00 <_sbrk_r>
 8002476:	1c43      	adds	r3, r0, #1
 8002478:	d101      	bne.n	800247e <sbrk_aligned+0x3a>
 800247a:	2501      	movs	r5, #1
 800247c:	426d      	negs	r5, r5
 800247e:	0028      	movs	r0, r5
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	2000011c 	.word	0x2000011c

08002488 <_malloc_r>:
 8002488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800248a:	2203      	movs	r2, #3
 800248c:	1ccb      	adds	r3, r1, #3
 800248e:	4393      	bics	r3, r2
 8002490:	3308      	adds	r3, #8
 8002492:	0006      	movs	r6, r0
 8002494:	001f      	movs	r7, r3
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d232      	bcs.n	8002500 <_malloc_r+0x78>
 800249a:	270c      	movs	r7, #12
 800249c:	42b9      	cmp	r1, r7
 800249e:	d831      	bhi.n	8002504 <_malloc_r+0x7c>
 80024a0:	0030      	movs	r0, r6
 80024a2:	f000 fffb 	bl	800349c <__malloc_lock>
 80024a6:	4d32      	ldr	r5, [pc, #200]	; (8002570 <_malloc_r+0xe8>)
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	001c      	movs	r4, r3
 80024ac:	2c00      	cmp	r4, #0
 80024ae:	d12e      	bne.n	800250e <_malloc_r+0x86>
 80024b0:	0039      	movs	r1, r7
 80024b2:	0030      	movs	r0, r6
 80024b4:	f7ff ffc6 	bl	8002444 <sbrk_aligned>
 80024b8:	0004      	movs	r4, r0
 80024ba:	1c43      	adds	r3, r0, #1
 80024bc:	d11e      	bne.n	80024fc <_malloc_r+0x74>
 80024be:	682c      	ldr	r4, [r5, #0]
 80024c0:	0025      	movs	r5, r4
 80024c2:	2d00      	cmp	r5, #0
 80024c4:	d14a      	bne.n	800255c <_malloc_r+0xd4>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	0029      	movs	r1, r5
 80024ca:	18e3      	adds	r3, r4, r3
 80024cc:	0030      	movs	r0, r6
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	f000 fc96 	bl	8002e00 <_sbrk_r>
 80024d4:	9b01      	ldr	r3, [sp, #4]
 80024d6:	4283      	cmp	r3, r0
 80024d8:	d143      	bne.n	8002562 <_malloc_r+0xda>
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	3703      	adds	r7, #3
 80024de:	1aff      	subs	r7, r7, r3
 80024e0:	2303      	movs	r3, #3
 80024e2:	439f      	bics	r7, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	2f0c      	cmp	r7, #12
 80024e8:	d200      	bcs.n	80024ec <_malloc_r+0x64>
 80024ea:	270c      	movs	r7, #12
 80024ec:	0039      	movs	r1, r7
 80024ee:	0030      	movs	r0, r6
 80024f0:	f7ff ffa8 	bl	8002444 <sbrk_aligned>
 80024f4:	1c43      	adds	r3, r0, #1
 80024f6:	d034      	beq.n	8002562 <_malloc_r+0xda>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	19df      	adds	r7, r3, r7
 80024fc:	6027      	str	r7, [r4, #0]
 80024fe:	e013      	b.n	8002528 <_malloc_r+0xa0>
 8002500:	2b00      	cmp	r3, #0
 8002502:	dacb      	bge.n	800249c <_malloc_r+0x14>
 8002504:	230c      	movs	r3, #12
 8002506:	2500      	movs	r5, #0
 8002508:	6033      	str	r3, [r6, #0]
 800250a:	0028      	movs	r0, r5
 800250c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	1bd1      	subs	r1, r2, r7
 8002512:	d420      	bmi.n	8002556 <_malloc_r+0xce>
 8002514:	290b      	cmp	r1, #11
 8002516:	d917      	bls.n	8002548 <_malloc_r+0xc0>
 8002518:	19e2      	adds	r2, r4, r7
 800251a:	6027      	str	r7, [r4, #0]
 800251c:	42a3      	cmp	r3, r4
 800251e:	d111      	bne.n	8002544 <_malloc_r+0xbc>
 8002520:	602a      	str	r2, [r5, #0]
 8002522:	6863      	ldr	r3, [r4, #4]
 8002524:	6011      	str	r1, [r2, #0]
 8002526:	6053      	str	r3, [r2, #4]
 8002528:	0030      	movs	r0, r6
 800252a:	0025      	movs	r5, r4
 800252c:	f000 ffbe 	bl	80034ac <__malloc_unlock>
 8002530:	2207      	movs	r2, #7
 8002532:	350b      	adds	r5, #11
 8002534:	1d23      	adds	r3, r4, #4
 8002536:	4395      	bics	r5, r2
 8002538:	1aea      	subs	r2, r5, r3
 800253a:	429d      	cmp	r5, r3
 800253c:	d0e5      	beq.n	800250a <_malloc_r+0x82>
 800253e:	1b5b      	subs	r3, r3, r5
 8002540:	50a3      	str	r3, [r4, r2]
 8002542:	e7e2      	b.n	800250a <_malloc_r+0x82>
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e7ec      	b.n	8002522 <_malloc_r+0x9a>
 8002548:	6862      	ldr	r2, [r4, #4]
 800254a:	42a3      	cmp	r3, r4
 800254c:	d101      	bne.n	8002552 <_malloc_r+0xca>
 800254e:	602a      	str	r2, [r5, #0]
 8002550:	e7ea      	b.n	8002528 <_malloc_r+0xa0>
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	e7e8      	b.n	8002528 <_malloc_r+0xa0>
 8002556:	0023      	movs	r3, r4
 8002558:	6864      	ldr	r4, [r4, #4]
 800255a:	e7a7      	b.n	80024ac <_malloc_r+0x24>
 800255c:	002c      	movs	r4, r5
 800255e:	686d      	ldr	r5, [r5, #4]
 8002560:	e7af      	b.n	80024c2 <_malloc_r+0x3a>
 8002562:	230c      	movs	r3, #12
 8002564:	0030      	movs	r0, r6
 8002566:	6033      	str	r3, [r6, #0]
 8002568:	f000 ffa0 	bl	80034ac <__malloc_unlock>
 800256c:	e7cd      	b.n	800250a <_malloc_r+0x82>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	20000118 	.word	0x20000118

08002574 <__ssputs_r>:
 8002574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002576:	688e      	ldr	r6, [r1, #8]
 8002578:	b085      	sub	sp, #20
 800257a:	0007      	movs	r7, r0
 800257c:	000c      	movs	r4, r1
 800257e:	9203      	str	r2, [sp, #12]
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	429e      	cmp	r6, r3
 8002584:	d83c      	bhi.n	8002600 <__ssputs_r+0x8c>
 8002586:	2390      	movs	r3, #144	; 0x90
 8002588:	898a      	ldrh	r2, [r1, #12]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	421a      	tst	r2, r3
 800258e:	d034      	beq.n	80025fa <__ssputs_r+0x86>
 8002590:	6909      	ldr	r1, [r1, #16]
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	6960      	ldr	r0, [r4, #20]
 8002596:	1a5b      	subs	r3, r3, r1
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	2303      	movs	r3, #3
 800259c:	4343      	muls	r3, r0
 800259e:	0fdd      	lsrs	r5, r3, #31
 80025a0:	18ed      	adds	r5, r5, r3
 80025a2:	9b01      	ldr	r3, [sp, #4]
 80025a4:	9802      	ldr	r0, [sp, #8]
 80025a6:	3301      	adds	r3, #1
 80025a8:	181b      	adds	r3, r3, r0
 80025aa:	106d      	asrs	r5, r5, #1
 80025ac:	42ab      	cmp	r3, r5
 80025ae:	d900      	bls.n	80025b2 <__ssputs_r+0x3e>
 80025b0:	001d      	movs	r5, r3
 80025b2:	0553      	lsls	r3, r2, #21
 80025b4:	d532      	bpl.n	800261c <__ssputs_r+0xa8>
 80025b6:	0029      	movs	r1, r5
 80025b8:	0038      	movs	r0, r7
 80025ba:	f7ff ff65 	bl	8002488 <_malloc_r>
 80025be:	1e06      	subs	r6, r0, #0
 80025c0:	d109      	bne.n	80025d6 <__ssputs_r+0x62>
 80025c2:	230c      	movs	r3, #12
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	2340      	movs	r3, #64	; 0x40
 80025c8:	2001      	movs	r0, #1
 80025ca:	89a2      	ldrh	r2, [r4, #12]
 80025cc:	4240      	negs	r0, r0
 80025ce:	4313      	orrs	r3, r2
 80025d0:	81a3      	strh	r3, [r4, #12]
 80025d2:	b005      	add	sp, #20
 80025d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d6:	9a02      	ldr	r2, [sp, #8]
 80025d8:	6921      	ldr	r1, [r4, #16]
 80025da:	f000 ff42 	bl	8003462 <memcpy>
 80025de:	89a3      	ldrh	r3, [r4, #12]
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <__ssputs_r+0xc0>)
 80025e2:	401a      	ands	r2, r3
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	4313      	orrs	r3, r2
 80025e8:	81a3      	strh	r3, [r4, #12]
 80025ea:	9b02      	ldr	r3, [sp, #8]
 80025ec:	6126      	str	r6, [r4, #16]
 80025ee:	18f6      	adds	r6, r6, r3
 80025f0:	6026      	str	r6, [r4, #0]
 80025f2:	6165      	str	r5, [r4, #20]
 80025f4:	9e01      	ldr	r6, [sp, #4]
 80025f6:	1aed      	subs	r5, r5, r3
 80025f8:	60a5      	str	r5, [r4, #8]
 80025fa:	9b01      	ldr	r3, [sp, #4]
 80025fc:	429e      	cmp	r6, r3
 80025fe:	d900      	bls.n	8002602 <__ssputs_r+0x8e>
 8002600:	9e01      	ldr	r6, [sp, #4]
 8002602:	0032      	movs	r2, r6
 8002604:	9903      	ldr	r1, [sp, #12]
 8002606:	6820      	ldr	r0, [r4, #0]
 8002608:	f000 ff34 	bl	8003474 <memmove>
 800260c:	68a3      	ldr	r3, [r4, #8]
 800260e:	2000      	movs	r0, #0
 8002610:	1b9b      	subs	r3, r3, r6
 8002612:	60a3      	str	r3, [r4, #8]
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	199e      	adds	r6, r3, r6
 8002618:	6026      	str	r6, [r4, #0]
 800261a:	e7da      	b.n	80025d2 <__ssputs_r+0x5e>
 800261c:	002a      	movs	r2, r5
 800261e:	0038      	movs	r0, r7
 8002620:	f000 ff4c 	bl	80034bc <_realloc_r>
 8002624:	1e06      	subs	r6, r0, #0
 8002626:	d1e0      	bne.n	80025ea <__ssputs_r+0x76>
 8002628:	0038      	movs	r0, r7
 800262a:	6921      	ldr	r1, [r4, #16]
 800262c:	f7ff fec0 	bl	80023b0 <_free_r>
 8002630:	e7c7      	b.n	80025c2 <__ssputs_r+0x4e>
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	fffffb7f 	.word	0xfffffb7f

08002638 <_svfiprintf_r>:
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263a:	b0a1      	sub	sp, #132	; 0x84
 800263c:	9003      	str	r0, [sp, #12]
 800263e:	001d      	movs	r5, r3
 8002640:	898b      	ldrh	r3, [r1, #12]
 8002642:	000f      	movs	r7, r1
 8002644:	0016      	movs	r6, r2
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	d511      	bpl.n	800266e <_svfiprintf_r+0x36>
 800264a:	690b      	ldr	r3, [r1, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10e      	bne.n	800266e <_svfiprintf_r+0x36>
 8002650:	2140      	movs	r1, #64	; 0x40
 8002652:	f7ff ff19 	bl	8002488 <_malloc_r>
 8002656:	6038      	str	r0, [r7, #0]
 8002658:	6138      	str	r0, [r7, #16]
 800265a:	2800      	cmp	r0, #0
 800265c:	d105      	bne.n	800266a <_svfiprintf_r+0x32>
 800265e:	230c      	movs	r3, #12
 8002660:	9a03      	ldr	r2, [sp, #12]
 8002662:	3801      	subs	r0, #1
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	b021      	add	sp, #132	; 0x84
 8002668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800266a:	2340      	movs	r3, #64	; 0x40
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	2300      	movs	r3, #0
 8002670:	ac08      	add	r4, sp, #32
 8002672:	6163      	str	r3, [r4, #20]
 8002674:	3320      	adds	r3, #32
 8002676:	7663      	strb	r3, [r4, #25]
 8002678:	3310      	adds	r3, #16
 800267a:	76a3      	strb	r3, [r4, #26]
 800267c:	9507      	str	r5, [sp, #28]
 800267e:	0035      	movs	r5, r6
 8002680:	782b      	ldrb	r3, [r5, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <_svfiprintf_r+0x52>
 8002686:	2b25      	cmp	r3, #37	; 0x25
 8002688:	d147      	bne.n	800271a <_svfiprintf_r+0xe2>
 800268a:	1bab      	subs	r3, r5, r6
 800268c:	9305      	str	r3, [sp, #20]
 800268e:	42b5      	cmp	r5, r6
 8002690:	d00c      	beq.n	80026ac <_svfiprintf_r+0x74>
 8002692:	0032      	movs	r2, r6
 8002694:	0039      	movs	r1, r7
 8002696:	9803      	ldr	r0, [sp, #12]
 8002698:	f7ff ff6c 	bl	8002574 <__ssputs_r>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d100      	bne.n	80026a2 <_svfiprintf_r+0x6a>
 80026a0:	e0ae      	b.n	8002800 <_svfiprintf_r+0x1c8>
 80026a2:	6962      	ldr	r2, [r4, #20]
 80026a4:	9b05      	ldr	r3, [sp, #20]
 80026a6:	4694      	mov	ip, r2
 80026a8:	4463      	add	r3, ip
 80026aa:	6163      	str	r3, [r4, #20]
 80026ac:	782b      	ldrb	r3, [r5, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d100      	bne.n	80026b4 <_svfiprintf_r+0x7c>
 80026b2:	e0a5      	b.n	8002800 <_svfiprintf_r+0x1c8>
 80026b4:	2201      	movs	r2, #1
 80026b6:	2300      	movs	r3, #0
 80026b8:	4252      	negs	r2, r2
 80026ba:	6062      	str	r2, [r4, #4]
 80026bc:	a904      	add	r1, sp, #16
 80026be:	3254      	adds	r2, #84	; 0x54
 80026c0:	1852      	adds	r2, r2, r1
 80026c2:	1c6e      	adds	r6, r5, #1
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	60e3      	str	r3, [r4, #12]
 80026c8:	60a3      	str	r3, [r4, #8]
 80026ca:	7013      	strb	r3, [r2, #0]
 80026cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80026ce:	2205      	movs	r2, #5
 80026d0:	7831      	ldrb	r1, [r6, #0]
 80026d2:	4854      	ldr	r0, [pc, #336]	; (8002824 <_svfiprintf_r+0x1ec>)
 80026d4:	f000 feba 	bl	800344c <memchr>
 80026d8:	1c75      	adds	r5, r6, #1
 80026da:	2800      	cmp	r0, #0
 80026dc:	d11f      	bne.n	800271e <_svfiprintf_r+0xe6>
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	06d3      	lsls	r3, r2, #27
 80026e2:	d504      	bpl.n	80026ee <_svfiprintf_r+0xb6>
 80026e4:	2353      	movs	r3, #83	; 0x53
 80026e6:	a904      	add	r1, sp, #16
 80026e8:	185b      	adds	r3, r3, r1
 80026ea:	2120      	movs	r1, #32
 80026ec:	7019      	strb	r1, [r3, #0]
 80026ee:	0713      	lsls	r3, r2, #28
 80026f0:	d504      	bpl.n	80026fc <_svfiprintf_r+0xc4>
 80026f2:	2353      	movs	r3, #83	; 0x53
 80026f4:	a904      	add	r1, sp, #16
 80026f6:	185b      	adds	r3, r3, r1
 80026f8:	212b      	movs	r1, #43	; 0x2b
 80026fa:	7019      	strb	r1, [r3, #0]
 80026fc:	7833      	ldrb	r3, [r6, #0]
 80026fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002700:	d016      	beq.n	8002730 <_svfiprintf_r+0xf8>
 8002702:	0035      	movs	r5, r6
 8002704:	2100      	movs	r1, #0
 8002706:	200a      	movs	r0, #10
 8002708:	68e3      	ldr	r3, [r4, #12]
 800270a:	782a      	ldrb	r2, [r5, #0]
 800270c:	1c6e      	adds	r6, r5, #1
 800270e:	3a30      	subs	r2, #48	; 0x30
 8002710:	2a09      	cmp	r2, #9
 8002712:	d94e      	bls.n	80027b2 <_svfiprintf_r+0x17a>
 8002714:	2900      	cmp	r1, #0
 8002716:	d111      	bne.n	800273c <_svfiprintf_r+0x104>
 8002718:	e017      	b.n	800274a <_svfiprintf_r+0x112>
 800271a:	3501      	adds	r5, #1
 800271c:	e7b0      	b.n	8002680 <_svfiprintf_r+0x48>
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <_svfiprintf_r+0x1ec>)
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	1ac0      	subs	r0, r0, r3
 8002724:	2301      	movs	r3, #1
 8002726:	4083      	lsls	r3, r0
 8002728:	4313      	orrs	r3, r2
 800272a:	002e      	movs	r6, r5
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	e7ce      	b.n	80026ce <_svfiprintf_r+0x96>
 8002730:	9b07      	ldr	r3, [sp, #28]
 8002732:	1d19      	adds	r1, r3, #4
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	9107      	str	r1, [sp, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db01      	blt.n	8002740 <_svfiprintf_r+0x108>
 800273c:	930b      	str	r3, [sp, #44]	; 0x2c
 800273e:	e004      	b.n	800274a <_svfiprintf_r+0x112>
 8002740:	425b      	negs	r3, r3
 8002742:	60e3      	str	r3, [r4, #12]
 8002744:	2302      	movs	r3, #2
 8002746:	4313      	orrs	r3, r2
 8002748:	6023      	str	r3, [r4, #0]
 800274a:	782b      	ldrb	r3, [r5, #0]
 800274c:	2b2e      	cmp	r3, #46	; 0x2e
 800274e:	d10a      	bne.n	8002766 <_svfiprintf_r+0x12e>
 8002750:	786b      	ldrb	r3, [r5, #1]
 8002752:	2b2a      	cmp	r3, #42	; 0x2a
 8002754:	d135      	bne.n	80027c2 <_svfiprintf_r+0x18a>
 8002756:	9b07      	ldr	r3, [sp, #28]
 8002758:	3502      	adds	r5, #2
 800275a:	1d1a      	adds	r2, r3, #4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	9207      	str	r2, [sp, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db2b      	blt.n	80027bc <_svfiprintf_r+0x184>
 8002764:	9309      	str	r3, [sp, #36]	; 0x24
 8002766:	4e30      	ldr	r6, [pc, #192]	; (8002828 <_svfiprintf_r+0x1f0>)
 8002768:	2203      	movs	r2, #3
 800276a:	0030      	movs	r0, r6
 800276c:	7829      	ldrb	r1, [r5, #0]
 800276e:	f000 fe6d 	bl	800344c <memchr>
 8002772:	2800      	cmp	r0, #0
 8002774:	d006      	beq.n	8002784 <_svfiprintf_r+0x14c>
 8002776:	2340      	movs	r3, #64	; 0x40
 8002778:	1b80      	subs	r0, r0, r6
 800277a:	4083      	lsls	r3, r0
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	3501      	adds	r5, #1
 8002780:	4313      	orrs	r3, r2
 8002782:	6023      	str	r3, [r4, #0]
 8002784:	7829      	ldrb	r1, [r5, #0]
 8002786:	2206      	movs	r2, #6
 8002788:	4828      	ldr	r0, [pc, #160]	; (800282c <_svfiprintf_r+0x1f4>)
 800278a:	1c6e      	adds	r6, r5, #1
 800278c:	7621      	strb	r1, [r4, #24]
 800278e:	f000 fe5d 	bl	800344c <memchr>
 8002792:	2800      	cmp	r0, #0
 8002794:	d03c      	beq.n	8002810 <_svfiprintf_r+0x1d8>
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <_svfiprintf_r+0x1f8>)
 8002798:	2b00      	cmp	r3, #0
 800279a:	d125      	bne.n	80027e8 <_svfiprintf_r+0x1b0>
 800279c:	2207      	movs	r2, #7
 800279e:	9b07      	ldr	r3, [sp, #28]
 80027a0:	3307      	adds	r3, #7
 80027a2:	4393      	bics	r3, r2
 80027a4:	3308      	adds	r3, #8
 80027a6:	9307      	str	r3, [sp, #28]
 80027a8:	6963      	ldr	r3, [r4, #20]
 80027aa:	9a04      	ldr	r2, [sp, #16]
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	6163      	str	r3, [r4, #20]
 80027b0:	e765      	b.n	800267e <_svfiprintf_r+0x46>
 80027b2:	4343      	muls	r3, r0
 80027b4:	0035      	movs	r5, r6
 80027b6:	2101      	movs	r1, #1
 80027b8:	189b      	adds	r3, r3, r2
 80027ba:	e7a6      	b.n	800270a <_svfiprintf_r+0xd2>
 80027bc:	2301      	movs	r3, #1
 80027be:	425b      	negs	r3, r3
 80027c0:	e7d0      	b.n	8002764 <_svfiprintf_r+0x12c>
 80027c2:	2300      	movs	r3, #0
 80027c4:	200a      	movs	r0, #10
 80027c6:	001a      	movs	r2, r3
 80027c8:	3501      	adds	r5, #1
 80027ca:	6063      	str	r3, [r4, #4]
 80027cc:	7829      	ldrb	r1, [r5, #0]
 80027ce:	1c6e      	adds	r6, r5, #1
 80027d0:	3930      	subs	r1, #48	; 0x30
 80027d2:	2909      	cmp	r1, #9
 80027d4:	d903      	bls.n	80027de <_svfiprintf_r+0x1a6>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0c5      	beq.n	8002766 <_svfiprintf_r+0x12e>
 80027da:	9209      	str	r2, [sp, #36]	; 0x24
 80027dc:	e7c3      	b.n	8002766 <_svfiprintf_r+0x12e>
 80027de:	4342      	muls	r2, r0
 80027e0:	0035      	movs	r5, r6
 80027e2:	2301      	movs	r3, #1
 80027e4:	1852      	adds	r2, r2, r1
 80027e6:	e7f1      	b.n	80027cc <_svfiprintf_r+0x194>
 80027e8:	ab07      	add	r3, sp, #28
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	003a      	movs	r2, r7
 80027ee:	0021      	movs	r1, r4
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <_svfiprintf_r+0x1fc>)
 80027f2:	9803      	ldr	r0, [sp, #12]
 80027f4:	e000      	b.n	80027f8 <_svfiprintf_r+0x1c0>
 80027f6:	bf00      	nop
 80027f8:	9004      	str	r0, [sp, #16]
 80027fa:	9b04      	ldr	r3, [sp, #16]
 80027fc:	3301      	adds	r3, #1
 80027fe:	d1d3      	bne.n	80027a8 <_svfiprintf_r+0x170>
 8002800:	89bb      	ldrh	r3, [r7, #12]
 8002802:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002804:	065b      	lsls	r3, r3, #25
 8002806:	d400      	bmi.n	800280a <_svfiprintf_r+0x1d2>
 8002808:	e72d      	b.n	8002666 <_svfiprintf_r+0x2e>
 800280a:	2001      	movs	r0, #1
 800280c:	4240      	negs	r0, r0
 800280e:	e72a      	b.n	8002666 <_svfiprintf_r+0x2e>
 8002810:	ab07      	add	r3, sp, #28
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	003a      	movs	r2, r7
 8002816:	0021      	movs	r1, r4
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <_svfiprintf_r+0x1fc>)
 800281a:	9803      	ldr	r0, [sp, #12]
 800281c:	f000 f9de 	bl	8002bdc <_printf_i>
 8002820:	e7ea      	b.n	80027f8 <_svfiprintf_r+0x1c0>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	0800384e 	.word	0x0800384e
 8002828:	08003854 	.word	0x08003854
 800282c:	08003858 	.word	0x08003858
 8002830:	00000000 	.word	0x00000000
 8002834:	08002575 	.word	0x08002575

08002838 <__sfputc_r>:
 8002838:	6893      	ldr	r3, [r2, #8]
 800283a:	b510      	push	{r4, lr}
 800283c:	3b01      	subs	r3, #1
 800283e:	6093      	str	r3, [r2, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	da04      	bge.n	800284e <__sfputc_r+0x16>
 8002844:	6994      	ldr	r4, [r2, #24]
 8002846:	42a3      	cmp	r3, r4
 8002848:	db07      	blt.n	800285a <__sfputc_r+0x22>
 800284a:	290a      	cmp	r1, #10
 800284c:	d005      	beq.n	800285a <__sfputc_r+0x22>
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	1c58      	adds	r0, r3, #1
 8002852:	6010      	str	r0, [r2, #0]
 8002854:	7019      	strb	r1, [r3, #0]
 8002856:	0008      	movs	r0, r1
 8002858:	bd10      	pop	{r4, pc}
 800285a:	f000 fae3 	bl	8002e24 <__swbuf_r>
 800285e:	0001      	movs	r1, r0
 8002860:	e7f9      	b.n	8002856 <__sfputc_r+0x1e>

08002862 <__sfputs_r>:
 8002862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002864:	0006      	movs	r6, r0
 8002866:	000f      	movs	r7, r1
 8002868:	0014      	movs	r4, r2
 800286a:	18d5      	adds	r5, r2, r3
 800286c:	42ac      	cmp	r4, r5
 800286e:	d101      	bne.n	8002874 <__sfputs_r+0x12>
 8002870:	2000      	movs	r0, #0
 8002872:	e007      	b.n	8002884 <__sfputs_r+0x22>
 8002874:	7821      	ldrb	r1, [r4, #0]
 8002876:	003a      	movs	r2, r7
 8002878:	0030      	movs	r0, r6
 800287a:	f7ff ffdd 	bl	8002838 <__sfputc_r>
 800287e:	3401      	adds	r4, #1
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d1f3      	bne.n	800286c <__sfputs_r+0xa>
 8002884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002888 <_vfiprintf_r>:
 8002888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288a:	b0a1      	sub	sp, #132	; 0x84
 800288c:	0006      	movs	r6, r0
 800288e:	000c      	movs	r4, r1
 8002890:	001f      	movs	r7, r3
 8002892:	9203      	str	r2, [sp, #12]
 8002894:	2800      	cmp	r0, #0
 8002896:	d004      	beq.n	80028a2 <_vfiprintf_r+0x1a>
 8002898:	6983      	ldr	r3, [r0, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <_vfiprintf_r+0x1a>
 800289e:	f000 fcc5 	bl	800322c <__sinit>
 80028a2:	4b8e      	ldr	r3, [pc, #568]	; (8002adc <_vfiprintf_r+0x254>)
 80028a4:	429c      	cmp	r4, r3
 80028a6:	d11c      	bne.n	80028e2 <_vfiprintf_r+0x5a>
 80028a8:	6874      	ldr	r4, [r6, #4]
 80028aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028ac:	07db      	lsls	r3, r3, #31
 80028ae:	d405      	bmi.n	80028bc <_vfiprintf_r+0x34>
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	059b      	lsls	r3, r3, #22
 80028b4:	d402      	bmi.n	80028bc <_vfiprintf_r+0x34>
 80028b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028b8:	f000 fd59 	bl	800336e <__retarget_lock_acquire_recursive>
 80028bc:	89a3      	ldrh	r3, [r4, #12]
 80028be:	071b      	lsls	r3, r3, #28
 80028c0:	d502      	bpl.n	80028c8 <_vfiprintf_r+0x40>
 80028c2:	6923      	ldr	r3, [r4, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11d      	bne.n	8002904 <_vfiprintf_r+0x7c>
 80028c8:	0021      	movs	r1, r4
 80028ca:	0030      	movs	r0, r6
 80028cc:	f000 fb00 	bl	8002ed0 <__swsetup_r>
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d017      	beq.n	8002904 <_vfiprintf_r+0x7c>
 80028d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028d6:	07db      	lsls	r3, r3, #31
 80028d8:	d50d      	bpl.n	80028f6 <_vfiprintf_r+0x6e>
 80028da:	2001      	movs	r0, #1
 80028dc:	4240      	negs	r0, r0
 80028de:	b021      	add	sp, #132	; 0x84
 80028e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e2:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <_vfiprintf_r+0x258>)
 80028e4:	429c      	cmp	r4, r3
 80028e6:	d101      	bne.n	80028ec <_vfiprintf_r+0x64>
 80028e8:	68b4      	ldr	r4, [r6, #8]
 80028ea:	e7de      	b.n	80028aa <_vfiprintf_r+0x22>
 80028ec:	4b7d      	ldr	r3, [pc, #500]	; (8002ae4 <_vfiprintf_r+0x25c>)
 80028ee:	429c      	cmp	r4, r3
 80028f0:	d1db      	bne.n	80028aa <_vfiprintf_r+0x22>
 80028f2:	68f4      	ldr	r4, [r6, #12]
 80028f4:	e7d9      	b.n	80028aa <_vfiprintf_r+0x22>
 80028f6:	89a3      	ldrh	r3, [r4, #12]
 80028f8:	059b      	lsls	r3, r3, #22
 80028fa:	d4ee      	bmi.n	80028da <_vfiprintf_r+0x52>
 80028fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028fe:	f000 fd37 	bl	8003370 <__retarget_lock_release_recursive>
 8002902:	e7ea      	b.n	80028da <_vfiprintf_r+0x52>
 8002904:	2300      	movs	r3, #0
 8002906:	ad08      	add	r5, sp, #32
 8002908:	616b      	str	r3, [r5, #20]
 800290a:	3320      	adds	r3, #32
 800290c:	766b      	strb	r3, [r5, #25]
 800290e:	3310      	adds	r3, #16
 8002910:	76ab      	strb	r3, [r5, #26]
 8002912:	9707      	str	r7, [sp, #28]
 8002914:	9f03      	ldr	r7, [sp, #12]
 8002916:	783b      	ldrb	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <_vfiprintf_r+0x98>
 800291c:	2b25      	cmp	r3, #37	; 0x25
 800291e:	d14e      	bne.n	80029be <_vfiprintf_r+0x136>
 8002920:	9b03      	ldr	r3, [sp, #12]
 8002922:	1afb      	subs	r3, r7, r3
 8002924:	9305      	str	r3, [sp, #20]
 8002926:	9b03      	ldr	r3, [sp, #12]
 8002928:	429f      	cmp	r7, r3
 800292a:	d00d      	beq.n	8002948 <_vfiprintf_r+0xc0>
 800292c:	9b05      	ldr	r3, [sp, #20]
 800292e:	0021      	movs	r1, r4
 8002930:	0030      	movs	r0, r6
 8002932:	9a03      	ldr	r2, [sp, #12]
 8002934:	f7ff ff95 	bl	8002862 <__sfputs_r>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d100      	bne.n	800293e <_vfiprintf_r+0xb6>
 800293c:	e0b5      	b.n	8002aaa <_vfiprintf_r+0x222>
 800293e:	696a      	ldr	r2, [r5, #20]
 8002940:	9b05      	ldr	r3, [sp, #20]
 8002942:	4694      	mov	ip, r2
 8002944:	4463      	add	r3, ip
 8002946:	616b      	str	r3, [r5, #20]
 8002948:	783b      	ldrb	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d100      	bne.n	8002950 <_vfiprintf_r+0xc8>
 800294e:	e0ac      	b.n	8002aaa <_vfiprintf_r+0x222>
 8002950:	2201      	movs	r2, #1
 8002952:	1c7b      	adds	r3, r7, #1
 8002954:	9303      	str	r3, [sp, #12]
 8002956:	2300      	movs	r3, #0
 8002958:	4252      	negs	r2, r2
 800295a:	606a      	str	r2, [r5, #4]
 800295c:	a904      	add	r1, sp, #16
 800295e:	3254      	adds	r2, #84	; 0x54
 8002960:	1852      	adds	r2, r2, r1
 8002962:	602b      	str	r3, [r5, #0]
 8002964:	60eb      	str	r3, [r5, #12]
 8002966:	60ab      	str	r3, [r5, #8]
 8002968:	7013      	strb	r3, [r2, #0]
 800296a:	65ab      	str	r3, [r5, #88]	; 0x58
 800296c:	9b03      	ldr	r3, [sp, #12]
 800296e:	2205      	movs	r2, #5
 8002970:	7819      	ldrb	r1, [r3, #0]
 8002972:	485d      	ldr	r0, [pc, #372]	; (8002ae8 <_vfiprintf_r+0x260>)
 8002974:	f000 fd6a 	bl	800344c <memchr>
 8002978:	9b03      	ldr	r3, [sp, #12]
 800297a:	1c5f      	adds	r7, r3, #1
 800297c:	2800      	cmp	r0, #0
 800297e:	d120      	bne.n	80029c2 <_vfiprintf_r+0x13a>
 8002980:	682a      	ldr	r2, [r5, #0]
 8002982:	06d3      	lsls	r3, r2, #27
 8002984:	d504      	bpl.n	8002990 <_vfiprintf_r+0x108>
 8002986:	2353      	movs	r3, #83	; 0x53
 8002988:	a904      	add	r1, sp, #16
 800298a:	185b      	adds	r3, r3, r1
 800298c:	2120      	movs	r1, #32
 800298e:	7019      	strb	r1, [r3, #0]
 8002990:	0713      	lsls	r3, r2, #28
 8002992:	d504      	bpl.n	800299e <_vfiprintf_r+0x116>
 8002994:	2353      	movs	r3, #83	; 0x53
 8002996:	a904      	add	r1, sp, #16
 8002998:	185b      	adds	r3, r3, r1
 800299a:	212b      	movs	r1, #43	; 0x2b
 800299c:	7019      	strb	r1, [r3, #0]
 800299e:	9b03      	ldr	r3, [sp, #12]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b2a      	cmp	r3, #42	; 0x2a
 80029a4:	d016      	beq.n	80029d4 <_vfiprintf_r+0x14c>
 80029a6:	2100      	movs	r1, #0
 80029a8:	68eb      	ldr	r3, [r5, #12]
 80029aa:	9f03      	ldr	r7, [sp, #12]
 80029ac:	783a      	ldrb	r2, [r7, #0]
 80029ae:	1c78      	adds	r0, r7, #1
 80029b0:	3a30      	subs	r2, #48	; 0x30
 80029b2:	4684      	mov	ip, r0
 80029b4:	2a09      	cmp	r2, #9
 80029b6:	d94f      	bls.n	8002a58 <_vfiprintf_r+0x1d0>
 80029b8:	2900      	cmp	r1, #0
 80029ba:	d111      	bne.n	80029e0 <_vfiprintf_r+0x158>
 80029bc:	e017      	b.n	80029ee <_vfiprintf_r+0x166>
 80029be:	3701      	adds	r7, #1
 80029c0:	e7a9      	b.n	8002916 <_vfiprintf_r+0x8e>
 80029c2:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <_vfiprintf_r+0x260>)
 80029c4:	682a      	ldr	r2, [r5, #0]
 80029c6:	1ac0      	subs	r0, r0, r3
 80029c8:	2301      	movs	r3, #1
 80029ca:	4083      	lsls	r3, r0
 80029cc:	4313      	orrs	r3, r2
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	9703      	str	r7, [sp, #12]
 80029d2:	e7cb      	b.n	800296c <_vfiprintf_r+0xe4>
 80029d4:	9b07      	ldr	r3, [sp, #28]
 80029d6:	1d19      	adds	r1, r3, #4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	9107      	str	r1, [sp, #28]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db01      	blt.n	80029e4 <_vfiprintf_r+0x15c>
 80029e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80029e2:	e004      	b.n	80029ee <_vfiprintf_r+0x166>
 80029e4:	425b      	negs	r3, r3
 80029e6:	60eb      	str	r3, [r5, #12]
 80029e8:	2302      	movs	r3, #2
 80029ea:	4313      	orrs	r3, r2
 80029ec:	602b      	str	r3, [r5, #0]
 80029ee:	783b      	ldrb	r3, [r7, #0]
 80029f0:	2b2e      	cmp	r3, #46	; 0x2e
 80029f2:	d10a      	bne.n	8002a0a <_vfiprintf_r+0x182>
 80029f4:	787b      	ldrb	r3, [r7, #1]
 80029f6:	2b2a      	cmp	r3, #42	; 0x2a
 80029f8:	d137      	bne.n	8002a6a <_vfiprintf_r+0x1e2>
 80029fa:	9b07      	ldr	r3, [sp, #28]
 80029fc:	3702      	adds	r7, #2
 80029fe:	1d1a      	adds	r2, r3, #4
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	9207      	str	r2, [sp, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db2d      	blt.n	8002a64 <_vfiprintf_r+0x1dc>
 8002a08:	9309      	str	r3, [sp, #36]	; 0x24
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	7839      	ldrb	r1, [r7, #0]
 8002a0e:	4837      	ldr	r0, [pc, #220]	; (8002aec <_vfiprintf_r+0x264>)
 8002a10:	f000 fd1c 	bl	800344c <memchr>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d007      	beq.n	8002a28 <_vfiprintf_r+0x1a0>
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <_vfiprintf_r+0x264>)
 8002a1a:	682a      	ldr	r2, [r5, #0]
 8002a1c:	1ac0      	subs	r0, r0, r3
 8002a1e:	2340      	movs	r3, #64	; 0x40
 8002a20:	4083      	lsls	r3, r0
 8002a22:	4313      	orrs	r3, r2
 8002a24:	3701      	adds	r7, #1
 8002a26:	602b      	str	r3, [r5, #0]
 8002a28:	7839      	ldrb	r1, [r7, #0]
 8002a2a:	1c7b      	adds	r3, r7, #1
 8002a2c:	2206      	movs	r2, #6
 8002a2e:	4830      	ldr	r0, [pc, #192]	; (8002af0 <_vfiprintf_r+0x268>)
 8002a30:	9303      	str	r3, [sp, #12]
 8002a32:	7629      	strb	r1, [r5, #24]
 8002a34:	f000 fd0a 	bl	800344c <memchr>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d045      	beq.n	8002ac8 <_vfiprintf_r+0x240>
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <_vfiprintf_r+0x26c>)
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d127      	bne.n	8002a92 <_vfiprintf_r+0x20a>
 8002a42:	2207      	movs	r2, #7
 8002a44:	9b07      	ldr	r3, [sp, #28]
 8002a46:	3307      	adds	r3, #7
 8002a48:	4393      	bics	r3, r2
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	9307      	str	r3, [sp, #28]
 8002a4e:	696b      	ldr	r3, [r5, #20]
 8002a50:	9a04      	ldr	r2, [sp, #16]
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	616b      	str	r3, [r5, #20]
 8002a56:	e75d      	b.n	8002914 <_vfiprintf_r+0x8c>
 8002a58:	210a      	movs	r1, #10
 8002a5a:	434b      	muls	r3, r1
 8002a5c:	4667      	mov	r7, ip
 8002a5e:	189b      	adds	r3, r3, r2
 8002a60:	3909      	subs	r1, #9
 8002a62:	e7a3      	b.n	80029ac <_vfiprintf_r+0x124>
 8002a64:	2301      	movs	r3, #1
 8002a66:	425b      	negs	r3, r3
 8002a68:	e7ce      	b.n	8002a08 <_vfiprintf_r+0x180>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	3701      	adds	r7, #1
 8002a70:	606b      	str	r3, [r5, #4]
 8002a72:	7839      	ldrb	r1, [r7, #0]
 8002a74:	1c78      	adds	r0, r7, #1
 8002a76:	3930      	subs	r1, #48	; 0x30
 8002a78:	4684      	mov	ip, r0
 8002a7a:	2909      	cmp	r1, #9
 8002a7c:	d903      	bls.n	8002a86 <_vfiprintf_r+0x1fe>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0c3      	beq.n	8002a0a <_vfiprintf_r+0x182>
 8002a82:	9209      	str	r2, [sp, #36]	; 0x24
 8002a84:	e7c1      	b.n	8002a0a <_vfiprintf_r+0x182>
 8002a86:	230a      	movs	r3, #10
 8002a88:	435a      	muls	r2, r3
 8002a8a:	4667      	mov	r7, ip
 8002a8c:	1852      	adds	r2, r2, r1
 8002a8e:	3b09      	subs	r3, #9
 8002a90:	e7ef      	b.n	8002a72 <_vfiprintf_r+0x1ea>
 8002a92:	ab07      	add	r3, sp, #28
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	0022      	movs	r2, r4
 8002a98:	0029      	movs	r1, r5
 8002a9a:	0030      	movs	r0, r6
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <_vfiprintf_r+0x270>)
 8002a9e:	e000      	b.n	8002aa2 <_vfiprintf_r+0x21a>
 8002aa0:	bf00      	nop
 8002aa2:	9004      	str	r0, [sp, #16]
 8002aa4:	9b04      	ldr	r3, [sp, #16]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	d1d1      	bne.n	8002a4e <_vfiprintf_r+0x1c6>
 8002aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aac:	07db      	lsls	r3, r3, #31
 8002aae:	d405      	bmi.n	8002abc <_vfiprintf_r+0x234>
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	059b      	lsls	r3, r3, #22
 8002ab4:	d402      	bmi.n	8002abc <_vfiprintf_r+0x234>
 8002ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ab8:	f000 fc5a 	bl	8003370 <__retarget_lock_release_recursive>
 8002abc:	89a3      	ldrh	r3, [r4, #12]
 8002abe:	065b      	lsls	r3, r3, #25
 8002ac0:	d500      	bpl.n	8002ac4 <_vfiprintf_r+0x23c>
 8002ac2:	e70a      	b.n	80028da <_vfiprintf_r+0x52>
 8002ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ac6:	e70a      	b.n	80028de <_vfiprintf_r+0x56>
 8002ac8:	ab07      	add	r3, sp, #28
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	0022      	movs	r2, r4
 8002ace:	0029      	movs	r1, r5
 8002ad0:	0030      	movs	r0, r6
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <_vfiprintf_r+0x270>)
 8002ad4:	f000 f882 	bl	8002bdc <_printf_i>
 8002ad8:	e7e3      	b.n	8002aa2 <_vfiprintf_r+0x21a>
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	080038a4 	.word	0x080038a4
 8002ae0:	080038c4 	.word	0x080038c4
 8002ae4:	08003884 	.word	0x08003884
 8002ae8:	0800384e 	.word	0x0800384e
 8002aec:	08003854 	.word	0x08003854
 8002af0:	08003858 	.word	0x08003858
 8002af4:	00000000 	.word	0x00000000
 8002af8:	08002863 	.word	0x08002863

08002afc <_printf_common>:
 8002afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002afe:	0015      	movs	r5, r2
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	688a      	ldr	r2, [r1, #8]
 8002b04:	690b      	ldr	r3, [r1, #16]
 8002b06:	000c      	movs	r4, r1
 8002b08:	9000      	str	r0, [sp, #0]
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	da00      	bge.n	8002b10 <_printf_common+0x14>
 8002b0e:	0013      	movs	r3, r2
 8002b10:	0022      	movs	r2, r4
 8002b12:	602b      	str	r3, [r5, #0]
 8002b14:	3243      	adds	r2, #67	; 0x43
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	2a00      	cmp	r2, #0
 8002b1a:	d001      	beq.n	8002b20 <_printf_common+0x24>
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	602b      	str	r3, [r5, #0]
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	069b      	lsls	r3, r3, #26
 8002b24:	d502      	bpl.n	8002b2c <_printf_common+0x30>
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	602b      	str	r3, [r5, #0]
 8002b2c:	6822      	ldr	r2, [r4, #0]
 8002b2e:	2306      	movs	r3, #6
 8002b30:	0017      	movs	r7, r2
 8002b32:	401f      	ands	r7, r3
 8002b34:	421a      	tst	r2, r3
 8002b36:	d027      	beq.n	8002b88 <_printf_common+0x8c>
 8002b38:	0023      	movs	r3, r4
 8002b3a:	3343      	adds	r3, #67	; 0x43
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	4193      	sbcs	r3, r2
 8002b42:	6822      	ldr	r2, [r4, #0]
 8002b44:	0692      	lsls	r2, r2, #26
 8002b46:	d430      	bmi.n	8002baa <_printf_common+0xae>
 8002b48:	0022      	movs	r2, r4
 8002b4a:	9901      	ldr	r1, [sp, #4]
 8002b4c:	9800      	ldr	r0, [sp, #0]
 8002b4e:	9e08      	ldr	r6, [sp, #32]
 8002b50:	3243      	adds	r2, #67	; 0x43
 8002b52:	47b0      	blx	r6
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	d025      	beq.n	8002ba4 <_printf_common+0xa8>
 8002b58:	2306      	movs	r3, #6
 8002b5a:	6820      	ldr	r0, [r4, #0]
 8002b5c:	682a      	ldr	r2, [r5, #0]
 8002b5e:	68e1      	ldr	r1, [r4, #12]
 8002b60:	2500      	movs	r5, #0
 8002b62:	4003      	ands	r3, r0
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d103      	bne.n	8002b70 <_printf_common+0x74>
 8002b68:	1a8d      	subs	r5, r1, r2
 8002b6a:	43eb      	mvns	r3, r5
 8002b6c:	17db      	asrs	r3, r3, #31
 8002b6e:	401d      	ands	r5, r3
 8002b70:	68a3      	ldr	r3, [r4, #8]
 8002b72:	6922      	ldr	r2, [r4, #16]
 8002b74:	4293      	cmp	r3, r2
 8002b76:	dd01      	ble.n	8002b7c <_printf_common+0x80>
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	18ed      	adds	r5, r5, r3
 8002b7c:	2700      	movs	r7, #0
 8002b7e:	42bd      	cmp	r5, r7
 8002b80:	d120      	bne.n	8002bc4 <_printf_common+0xc8>
 8002b82:	2000      	movs	r0, #0
 8002b84:	e010      	b.n	8002ba8 <_printf_common+0xac>
 8002b86:	3701      	adds	r7, #1
 8002b88:	68e3      	ldr	r3, [r4, #12]
 8002b8a:	682a      	ldr	r2, [r5, #0]
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	42bb      	cmp	r3, r7
 8002b90:	ddd2      	ble.n	8002b38 <_printf_common+0x3c>
 8002b92:	0022      	movs	r2, r4
 8002b94:	2301      	movs	r3, #1
 8002b96:	9901      	ldr	r1, [sp, #4]
 8002b98:	9800      	ldr	r0, [sp, #0]
 8002b9a:	9e08      	ldr	r6, [sp, #32]
 8002b9c:	3219      	adds	r2, #25
 8002b9e:	47b0      	blx	r6
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d1f0      	bne.n	8002b86 <_printf_common+0x8a>
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	4240      	negs	r0, r0
 8002ba8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002baa:	2030      	movs	r0, #48	; 0x30
 8002bac:	18e1      	adds	r1, r4, r3
 8002bae:	3143      	adds	r1, #67	; 0x43
 8002bb0:	7008      	strb	r0, [r1, #0]
 8002bb2:	0021      	movs	r1, r4
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	3145      	adds	r1, #69	; 0x45
 8002bb8:	7809      	ldrb	r1, [r1, #0]
 8002bba:	18a2      	adds	r2, r4, r2
 8002bbc:	3243      	adds	r2, #67	; 0x43
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	7011      	strb	r1, [r2, #0]
 8002bc2:	e7c1      	b.n	8002b48 <_printf_common+0x4c>
 8002bc4:	0022      	movs	r2, r4
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	9901      	ldr	r1, [sp, #4]
 8002bca:	9800      	ldr	r0, [sp, #0]
 8002bcc:	9e08      	ldr	r6, [sp, #32]
 8002bce:	321a      	adds	r2, #26
 8002bd0:	47b0      	blx	r6
 8002bd2:	1c43      	adds	r3, r0, #1
 8002bd4:	d0e6      	beq.n	8002ba4 <_printf_common+0xa8>
 8002bd6:	3701      	adds	r7, #1
 8002bd8:	e7d1      	b.n	8002b7e <_printf_common+0x82>
	...

08002bdc <_printf_i>:
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	9206      	str	r2, [sp, #24]
 8002be2:	000a      	movs	r2, r1
 8002be4:	3243      	adds	r2, #67	; 0x43
 8002be6:	9307      	str	r3, [sp, #28]
 8002be8:	9005      	str	r0, [sp, #20]
 8002bea:	9204      	str	r2, [sp, #16]
 8002bec:	7e0a      	ldrb	r2, [r1, #24]
 8002bee:	000c      	movs	r4, r1
 8002bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002bf2:	2a78      	cmp	r2, #120	; 0x78
 8002bf4:	d807      	bhi.n	8002c06 <_printf_i+0x2a>
 8002bf6:	2a62      	cmp	r2, #98	; 0x62
 8002bf8:	d809      	bhi.n	8002c0e <_printf_i+0x32>
 8002bfa:	2a00      	cmp	r2, #0
 8002bfc:	d100      	bne.n	8002c00 <_printf_i+0x24>
 8002bfe:	e0c1      	b.n	8002d84 <_printf_i+0x1a8>
 8002c00:	2a58      	cmp	r2, #88	; 0x58
 8002c02:	d100      	bne.n	8002c06 <_printf_i+0x2a>
 8002c04:	e08c      	b.n	8002d20 <_printf_i+0x144>
 8002c06:	0026      	movs	r6, r4
 8002c08:	3642      	adds	r6, #66	; 0x42
 8002c0a:	7032      	strb	r2, [r6, #0]
 8002c0c:	e022      	b.n	8002c54 <_printf_i+0x78>
 8002c0e:	0010      	movs	r0, r2
 8002c10:	3863      	subs	r0, #99	; 0x63
 8002c12:	2815      	cmp	r0, #21
 8002c14:	d8f7      	bhi.n	8002c06 <_printf_i+0x2a>
 8002c16:	f7fd fa77 	bl	8000108 <__gnu_thumb1_case_shi>
 8002c1a:	0016      	.short	0x0016
 8002c1c:	fff6001f 	.word	0xfff6001f
 8002c20:	fff6fff6 	.word	0xfff6fff6
 8002c24:	001ffff6 	.word	0x001ffff6
 8002c28:	fff6fff6 	.word	0xfff6fff6
 8002c2c:	fff6fff6 	.word	0xfff6fff6
 8002c30:	003600a8 	.word	0x003600a8
 8002c34:	fff6009a 	.word	0xfff6009a
 8002c38:	00b9fff6 	.word	0x00b9fff6
 8002c3c:	0036fff6 	.word	0x0036fff6
 8002c40:	fff6fff6 	.word	0xfff6fff6
 8002c44:	009e      	.short	0x009e
 8002c46:	0026      	movs	r6, r4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	3642      	adds	r6, #66	; 0x42
 8002c4c:	1d11      	adds	r1, r2, #4
 8002c4e:	6019      	str	r1, [r3, #0]
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	7033      	strb	r3, [r6, #0]
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0a7      	b.n	8002da8 <_printf_i+0x1cc>
 8002c58:	6808      	ldr	r0, [r1, #0]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	1d0a      	adds	r2, r1, #4
 8002c5e:	0605      	lsls	r5, r0, #24
 8002c60:	d50b      	bpl.n	8002c7a <_printf_i+0x9e>
 8002c62:	680d      	ldr	r5, [r1, #0]
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	2d00      	cmp	r5, #0
 8002c68:	da03      	bge.n	8002c72 <_printf_i+0x96>
 8002c6a:	232d      	movs	r3, #45	; 0x2d
 8002c6c:	9a04      	ldr	r2, [sp, #16]
 8002c6e:	426d      	negs	r5, r5
 8002c70:	7013      	strb	r3, [r2, #0]
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <_printf_i+0x21c>)
 8002c74:	270a      	movs	r7, #10
 8002c76:	9303      	str	r3, [sp, #12]
 8002c78:	e01b      	b.n	8002cb2 <_printf_i+0xd6>
 8002c7a:	680d      	ldr	r5, [r1, #0]
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	0641      	lsls	r1, r0, #25
 8002c80:	d5f1      	bpl.n	8002c66 <_printf_i+0x8a>
 8002c82:	b22d      	sxth	r5, r5
 8002c84:	e7ef      	b.n	8002c66 <_printf_i+0x8a>
 8002c86:	680d      	ldr	r5, [r1, #0]
 8002c88:	6819      	ldr	r1, [r3, #0]
 8002c8a:	1d08      	adds	r0, r1, #4
 8002c8c:	6018      	str	r0, [r3, #0]
 8002c8e:	062e      	lsls	r6, r5, #24
 8002c90:	d501      	bpl.n	8002c96 <_printf_i+0xba>
 8002c92:	680d      	ldr	r5, [r1, #0]
 8002c94:	e003      	b.n	8002c9e <_printf_i+0xc2>
 8002c96:	066d      	lsls	r5, r5, #25
 8002c98:	d5fb      	bpl.n	8002c92 <_printf_i+0xb6>
 8002c9a:	680d      	ldr	r5, [r1, #0]
 8002c9c:	b2ad      	uxth	r5, r5
 8002c9e:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <_printf_i+0x21c>)
 8002ca0:	2708      	movs	r7, #8
 8002ca2:	9303      	str	r3, [sp, #12]
 8002ca4:	2a6f      	cmp	r2, #111	; 0x6f
 8002ca6:	d000      	beq.n	8002caa <_printf_i+0xce>
 8002ca8:	3702      	adds	r7, #2
 8002caa:	0023      	movs	r3, r4
 8002cac:	2200      	movs	r2, #0
 8002cae:	3343      	adds	r3, #67	; 0x43
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	6863      	ldr	r3, [r4, #4]
 8002cb4:	60a3      	str	r3, [r4, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db03      	blt.n	8002cc2 <_printf_i+0xe6>
 8002cba:	2204      	movs	r2, #4
 8002cbc:	6821      	ldr	r1, [r4, #0]
 8002cbe:	4391      	bics	r1, r2
 8002cc0:	6021      	str	r1, [r4, #0]
 8002cc2:	2d00      	cmp	r5, #0
 8002cc4:	d102      	bne.n	8002ccc <_printf_i+0xf0>
 8002cc6:	9e04      	ldr	r6, [sp, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <_printf_i+0x10a>
 8002ccc:	9e04      	ldr	r6, [sp, #16]
 8002cce:	0028      	movs	r0, r5
 8002cd0:	0039      	movs	r1, r7
 8002cd2:	f7fd faa9 	bl	8000228 <__aeabi_uidivmod>
 8002cd6:	9b03      	ldr	r3, [sp, #12]
 8002cd8:	3e01      	subs	r6, #1
 8002cda:	5c5b      	ldrb	r3, [r3, r1]
 8002cdc:	7033      	strb	r3, [r6, #0]
 8002cde:	002b      	movs	r3, r5
 8002ce0:	0005      	movs	r5, r0
 8002ce2:	429f      	cmp	r7, r3
 8002ce4:	d9f3      	bls.n	8002cce <_printf_i+0xf2>
 8002ce6:	2f08      	cmp	r7, #8
 8002ce8:	d109      	bne.n	8002cfe <_printf_i+0x122>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	07db      	lsls	r3, r3, #31
 8002cee:	d506      	bpl.n	8002cfe <_printf_i+0x122>
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	6922      	ldr	r2, [r4, #16]
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	dc02      	bgt.n	8002cfe <_printf_i+0x122>
 8002cf8:	2330      	movs	r3, #48	; 0x30
 8002cfa:	3e01      	subs	r6, #1
 8002cfc:	7033      	strb	r3, [r6, #0]
 8002cfe:	9b04      	ldr	r3, [sp, #16]
 8002d00:	1b9b      	subs	r3, r3, r6
 8002d02:	6123      	str	r3, [r4, #16]
 8002d04:	9b07      	ldr	r3, [sp, #28]
 8002d06:	0021      	movs	r1, r4
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	9805      	ldr	r0, [sp, #20]
 8002d0c:	9b06      	ldr	r3, [sp, #24]
 8002d0e:	aa09      	add	r2, sp, #36	; 0x24
 8002d10:	f7ff fef4 	bl	8002afc <_printf_common>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d14c      	bne.n	8002db2 <_printf_i+0x1d6>
 8002d18:	2001      	movs	r0, #1
 8002d1a:	4240      	negs	r0, r0
 8002d1c:	b00b      	add	sp, #44	; 0x2c
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d20:	3145      	adds	r1, #69	; 0x45
 8002d22:	700a      	strb	r2, [r1, #0]
 8002d24:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <_printf_i+0x21c>)
 8002d26:	9203      	str	r2, [sp, #12]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	6821      	ldr	r1, [r4, #0]
 8002d2c:	ca20      	ldmia	r2!, {r5}
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	0608      	lsls	r0, r1, #24
 8002d32:	d516      	bpl.n	8002d62 <_printf_i+0x186>
 8002d34:	07cb      	lsls	r3, r1, #31
 8002d36:	d502      	bpl.n	8002d3e <_printf_i+0x162>
 8002d38:	2320      	movs	r3, #32
 8002d3a:	4319      	orrs	r1, r3
 8002d3c:	6021      	str	r1, [r4, #0]
 8002d3e:	2710      	movs	r7, #16
 8002d40:	2d00      	cmp	r5, #0
 8002d42:	d1b2      	bne.n	8002caa <_printf_i+0xce>
 8002d44:	2320      	movs	r3, #32
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	439a      	bics	r2, r3
 8002d4a:	6022      	str	r2, [r4, #0]
 8002d4c:	e7ad      	b.n	8002caa <_printf_i+0xce>
 8002d4e:	2220      	movs	r2, #32
 8002d50:	6809      	ldr	r1, [r1, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	6022      	str	r2, [r4, #0]
 8002d56:	0022      	movs	r2, r4
 8002d58:	2178      	movs	r1, #120	; 0x78
 8002d5a:	3245      	adds	r2, #69	; 0x45
 8002d5c:	7011      	strb	r1, [r2, #0]
 8002d5e:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <_printf_i+0x220>)
 8002d60:	e7e1      	b.n	8002d26 <_printf_i+0x14a>
 8002d62:	0648      	lsls	r0, r1, #25
 8002d64:	d5e6      	bpl.n	8002d34 <_printf_i+0x158>
 8002d66:	b2ad      	uxth	r5, r5
 8002d68:	e7e4      	b.n	8002d34 <_printf_i+0x158>
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	680d      	ldr	r5, [r1, #0]
 8002d6e:	1d10      	adds	r0, r2, #4
 8002d70:	6949      	ldr	r1, [r1, #20]
 8002d72:	6018      	str	r0, [r3, #0]
 8002d74:	6813      	ldr	r3, [r2, #0]
 8002d76:	062e      	lsls	r6, r5, #24
 8002d78:	d501      	bpl.n	8002d7e <_printf_i+0x1a2>
 8002d7a:	6019      	str	r1, [r3, #0]
 8002d7c:	e002      	b.n	8002d84 <_printf_i+0x1a8>
 8002d7e:	066d      	lsls	r5, r5, #25
 8002d80:	d5fb      	bpl.n	8002d7a <_printf_i+0x19e>
 8002d82:	8019      	strh	r1, [r3, #0]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9e04      	ldr	r6, [sp, #16]
 8002d88:	6123      	str	r3, [r4, #16]
 8002d8a:	e7bb      	b.n	8002d04 <_printf_i+0x128>
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	1d11      	adds	r1, r2, #4
 8002d90:	6019      	str	r1, [r3, #0]
 8002d92:	6816      	ldr	r6, [r2, #0]
 8002d94:	2100      	movs	r1, #0
 8002d96:	0030      	movs	r0, r6
 8002d98:	6862      	ldr	r2, [r4, #4]
 8002d9a:	f000 fb57 	bl	800344c <memchr>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d001      	beq.n	8002da6 <_printf_i+0x1ca>
 8002da2:	1b80      	subs	r0, r0, r6
 8002da4:	6060      	str	r0, [r4, #4]
 8002da6:	6863      	ldr	r3, [r4, #4]
 8002da8:	6123      	str	r3, [r4, #16]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9a04      	ldr	r2, [sp, #16]
 8002dae:	7013      	strb	r3, [r2, #0]
 8002db0:	e7a8      	b.n	8002d04 <_printf_i+0x128>
 8002db2:	6923      	ldr	r3, [r4, #16]
 8002db4:	0032      	movs	r2, r6
 8002db6:	9906      	ldr	r1, [sp, #24]
 8002db8:	9805      	ldr	r0, [sp, #20]
 8002dba:	9d07      	ldr	r5, [sp, #28]
 8002dbc:	47a8      	blx	r5
 8002dbe:	1c43      	adds	r3, r0, #1
 8002dc0:	d0aa      	beq.n	8002d18 <_printf_i+0x13c>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	079b      	lsls	r3, r3, #30
 8002dc6:	d415      	bmi.n	8002df4 <_printf_i+0x218>
 8002dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dca:	68e0      	ldr	r0, [r4, #12]
 8002dcc:	4298      	cmp	r0, r3
 8002dce:	daa5      	bge.n	8002d1c <_printf_i+0x140>
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	e7a3      	b.n	8002d1c <_printf_i+0x140>
 8002dd4:	0022      	movs	r2, r4
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	9906      	ldr	r1, [sp, #24]
 8002dda:	9805      	ldr	r0, [sp, #20]
 8002ddc:	9e07      	ldr	r6, [sp, #28]
 8002dde:	3219      	adds	r2, #25
 8002de0:	47b0      	blx	r6
 8002de2:	1c43      	adds	r3, r0, #1
 8002de4:	d098      	beq.n	8002d18 <_printf_i+0x13c>
 8002de6:	3501      	adds	r5, #1
 8002de8:	68e3      	ldr	r3, [r4, #12]
 8002dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	42ab      	cmp	r3, r5
 8002df0:	dcf0      	bgt.n	8002dd4 <_printf_i+0x1f8>
 8002df2:	e7e9      	b.n	8002dc8 <_printf_i+0x1ec>
 8002df4:	2500      	movs	r5, #0
 8002df6:	e7f7      	b.n	8002de8 <_printf_i+0x20c>
 8002df8:	0800385f 	.word	0x0800385f
 8002dfc:	08003870 	.word	0x08003870

08002e00 <_sbrk_r>:
 8002e00:	2300      	movs	r3, #0
 8002e02:	b570      	push	{r4, r5, r6, lr}
 8002e04:	4d06      	ldr	r5, [pc, #24]	; (8002e20 <_sbrk_r+0x20>)
 8002e06:	0004      	movs	r4, r0
 8002e08:	0008      	movs	r0, r1
 8002e0a:	602b      	str	r3, [r5, #0]
 8002e0c:	f7fd fd90 	bl	8000930 <_sbrk>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d103      	bne.n	8002e1c <_sbrk_r+0x1c>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d000      	beq.n	8002e1c <_sbrk_r+0x1c>
 8002e1a:	6023      	str	r3, [r4, #0]
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	20000124 	.word	0x20000124

08002e24 <__swbuf_r>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	0005      	movs	r5, r0
 8002e28:	000e      	movs	r6, r1
 8002e2a:	0014      	movs	r4, r2
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d004      	beq.n	8002e3a <__swbuf_r+0x16>
 8002e30:	6983      	ldr	r3, [r0, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <__swbuf_r+0x16>
 8002e36:	f000 f9f9 	bl	800322c <__sinit>
 8002e3a:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <__swbuf_r+0xa0>)
 8002e3c:	429c      	cmp	r4, r3
 8002e3e:	d12e      	bne.n	8002e9e <__swbuf_r+0x7a>
 8002e40:	686c      	ldr	r4, [r5, #4]
 8002e42:	69a3      	ldr	r3, [r4, #24]
 8002e44:	60a3      	str	r3, [r4, #8]
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	071b      	lsls	r3, r3, #28
 8002e4a:	d532      	bpl.n	8002eb2 <__swbuf_r+0x8e>
 8002e4c:	6923      	ldr	r3, [r4, #16]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d02f      	beq.n	8002eb2 <__swbuf_r+0x8e>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	6922      	ldr	r2, [r4, #16]
 8002e56:	b2f7      	uxtb	r7, r6
 8002e58:	1a98      	subs	r0, r3, r2
 8002e5a:	6963      	ldr	r3, [r4, #20]
 8002e5c:	b2f6      	uxtb	r6, r6
 8002e5e:	4283      	cmp	r3, r0
 8002e60:	dc05      	bgt.n	8002e6e <__swbuf_r+0x4a>
 8002e62:	0021      	movs	r1, r4
 8002e64:	0028      	movs	r0, r5
 8002e66:	f000 f93f 	bl	80030e8 <_fflush_r>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d127      	bne.n	8002ebe <__swbuf_r+0x9a>
 8002e6e:	68a3      	ldr	r3, [r4, #8]
 8002e70:	3001      	adds	r0, #1
 8002e72:	3b01      	subs	r3, #1
 8002e74:	60a3      	str	r3, [r4, #8]
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	6022      	str	r2, [r4, #0]
 8002e7c:	701f      	strb	r7, [r3, #0]
 8002e7e:	6963      	ldr	r3, [r4, #20]
 8002e80:	4283      	cmp	r3, r0
 8002e82:	d004      	beq.n	8002e8e <__swbuf_r+0x6a>
 8002e84:	89a3      	ldrh	r3, [r4, #12]
 8002e86:	07db      	lsls	r3, r3, #31
 8002e88:	d507      	bpl.n	8002e9a <__swbuf_r+0x76>
 8002e8a:	2e0a      	cmp	r6, #10
 8002e8c:	d105      	bne.n	8002e9a <__swbuf_r+0x76>
 8002e8e:	0021      	movs	r1, r4
 8002e90:	0028      	movs	r0, r5
 8002e92:	f000 f929 	bl	80030e8 <_fflush_r>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d111      	bne.n	8002ebe <__swbuf_r+0x9a>
 8002e9a:	0030      	movs	r0, r6
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <__swbuf_r+0xa4>)
 8002ea0:	429c      	cmp	r4, r3
 8002ea2:	d101      	bne.n	8002ea8 <__swbuf_r+0x84>
 8002ea4:	68ac      	ldr	r4, [r5, #8]
 8002ea6:	e7cc      	b.n	8002e42 <__swbuf_r+0x1e>
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <__swbuf_r+0xa8>)
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	d1c9      	bne.n	8002e42 <__swbuf_r+0x1e>
 8002eae:	68ec      	ldr	r4, [r5, #12]
 8002eb0:	e7c7      	b.n	8002e42 <__swbuf_r+0x1e>
 8002eb2:	0021      	movs	r1, r4
 8002eb4:	0028      	movs	r0, r5
 8002eb6:	f000 f80b 	bl	8002ed0 <__swsetup_r>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d0c9      	beq.n	8002e52 <__swbuf_r+0x2e>
 8002ebe:	2601      	movs	r6, #1
 8002ec0:	4276      	negs	r6, r6
 8002ec2:	e7ea      	b.n	8002e9a <__swbuf_r+0x76>
 8002ec4:	080038a4 	.word	0x080038a4
 8002ec8:	080038c4 	.word	0x080038c4
 8002ecc:	08003884 	.word	0x08003884

08002ed0 <__swsetup_r>:
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <__swsetup_r+0xe0>)
 8002ed2:	b570      	push	{r4, r5, r6, lr}
 8002ed4:	681d      	ldr	r5, [r3, #0]
 8002ed6:	0006      	movs	r6, r0
 8002ed8:	000c      	movs	r4, r1
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	d005      	beq.n	8002eea <__swsetup_r+0x1a>
 8002ede:	69ab      	ldr	r3, [r5, #24]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <__swsetup_r+0x1a>
 8002ee4:	0028      	movs	r0, r5
 8002ee6:	f000 f9a1 	bl	800322c <__sinit>
 8002eea:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <__swsetup_r+0xe4>)
 8002eec:	429c      	cmp	r4, r3
 8002eee:	d10f      	bne.n	8002f10 <__swsetup_r+0x40>
 8002ef0:	686c      	ldr	r4, [r5, #4]
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	5ee2      	ldrsh	r2, [r4, r3]
 8002ef6:	b293      	uxth	r3, r2
 8002ef8:	0711      	lsls	r1, r2, #28
 8002efa:	d42d      	bmi.n	8002f58 <__swsetup_r+0x88>
 8002efc:	06d9      	lsls	r1, r3, #27
 8002efe:	d411      	bmi.n	8002f24 <__swsetup_r+0x54>
 8002f00:	2309      	movs	r3, #9
 8002f02:	2001      	movs	r0, #1
 8002f04:	6033      	str	r3, [r6, #0]
 8002f06:	3337      	adds	r3, #55	; 0x37
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	81a3      	strh	r3, [r4, #12]
 8002f0c:	4240      	negs	r0, r0
 8002f0e:	bd70      	pop	{r4, r5, r6, pc}
 8002f10:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <__swsetup_r+0xe8>)
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d101      	bne.n	8002f1a <__swsetup_r+0x4a>
 8002f16:	68ac      	ldr	r4, [r5, #8]
 8002f18:	e7eb      	b.n	8002ef2 <__swsetup_r+0x22>
 8002f1a:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <__swsetup_r+0xec>)
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	d1e8      	bne.n	8002ef2 <__swsetup_r+0x22>
 8002f20:	68ec      	ldr	r4, [r5, #12]
 8002f22:	e7e6      	b.n	8002ef2 <__swsetup_r+0x22>
 8002f24:	075b      	lsls	r3, r3, #29
 8002f26:	d513      	bpl.n	8002f50 <__swsetup_r+0x80>
 8002f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	d008      	beq.n	8002f40 <__swsetup_r+0x70>
 8002f2e:	0023      	movs	r3, r4
 8002f30:	3344      	adds	r3, #68	; 0x44
 8002f32:	4299      	cmp	r1, r3
 8002f34:	d002      	beq.n	8002f3c <__swsetup_r+0x6c>
 8002f36:	0030      	movs	r0, r6
 8002f38:	f7ff fa3a 	bl	80023b0 <_free_r>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6363      	str	r3, [r4, #52]	; 0x34
 8002f40:	2224      	movs	r2, #36	; 0x24
 8002f42:	89a3      	ldrh	r3, [r4, #12]
 8002f44:	4393      	bics	r3, r2
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	6063      	str	r3, [r4, #4]
 8002f4c:	6923      	ldr	r3, [r4, #16]
 8002f4e:	6023      	str	r3, [r4, #0]
 8002f50:	2308      	movs	r3, #8
 8002f52:	89a2      	ldrh	r2, [r4, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	81a3      	strh	r3, [r4, #12]
 8002f58:	6923      	ldr	r3, [r4, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <__swsetup_r+0xa6>
 8002f5e:	21a0      	movs	r1, #160	; 0xa0
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	89a3      	ldrh	r3, [r4, #12]
 8002f64:	0089      	lsls	r1, r1, #2
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	400b      	ands	r3, r1
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <__swsetup_r+0xa6>
 8002f6e:	0021      	movs	r1, r4
 8002f70:	0030      	movs	r0, r6
 8002f72:	f000 fa27 	bl	80033c4 <__smakebuf_r>
 8002f76:	220c      	movs	r2, #12
 8002f78:	5ea3      	ldrsh	r3, [r4, r2]
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	b299      	uxth	r1, r3
 8002f80:	4002      	ands	r2, r0
 8002f82:	4203      	tst	r3, r0
 8002f84:	d00f      	beq.n	8002fa6 <__swsetup_r+0xd6>
 8002f86:	2200      	movs	r2, #0
 8002f88:	60a2      	str	r2, [r4, #8]
 8002f8a:	6962      	ldr	r2, [r4, #20]
 8002f8c:	4252      	negs	r2, r2
 8002f8e:	61a2      	str	r2, [r4, #24]
 8002f90:	2000      	movs	r0, #0
 8002f92:	6922      	ldr	r2, [r4, #16]
 8002f94:	4282      	cmp	r2, r0
 8002f96:	d1ba      	bne.n	8002f0e <__swsetup_r+0x3e>
 8002f98:	060a      	lsls	r2, r1, #24
 8002f9a:	d5b8      	bpl.n	8002f0e <__swsetup_r+0x3e>
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	81a3      	strh	r3, [r4, #12]
 8002fa2:	3801      	subs	r0, #1
 8002fa4:	e7b3      	b.n	8002f0e <__swsetup_r+0x3e>
 8002fa6:	0788      	lsls	r0, r1, #30
 8002fa8:	d400      	bmi.n	8002fac <__swsetup_r+0xdc>
 8002faa:	6962      	ldr	r2, [r4, #20]
 8002fac:	60a2      	str	r2, [r4, #8]
 8002fae:	e7ef      	b.n	8002f90 <__swsetup_r+0xc0>
 8002fb0:	2000000c 	.word	0x2000000c
 8002fb4:	080038a4 	.word	0x080038a4
 8002fb8:	080038c4 	.word	0x080038c4
 8002fbc:	08003884 	.word	0x08003884

08002fc0 <abort>:
 8002fc0:	2006      	movs	r0, #6
 8002fc2:	b510      	push	{r4, lr}
 8002fc4:	f000 fad4 	bl	8003570 <raise>
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f7fd fc40 	bl	800084e <_exit>
	...

08002fd0 <__sflush_r>:
 8002fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fd2:	898b      	ldrh	r3, [r1, #12]
 8002fd4:	0005      	movs	r5, r0
 8002fd6:	000c      	movs	r4, r1
 8002fd8:	071a      	lsls	r2, r3, #28
 8002fda:	d45f      	bmi.n	800309c <__sflush_r+0xcc>
 8002fdc:	684a      	ldr	r2, [r1, #4]
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	dc04      	bgt.n	8002fec <__sflush_r+0x1c>
 8002fe2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002fe4:	2a00      	cmp	r2, #0
 8002fe6:	dc01      	bgt.n	8002fec <__sflush_r+0x1c>
 8002fe8:	2000      	movs	r0, #0
 8002fea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002fee:	2f00      	cmp	r7, #0
 8002ff0:	d0fa      	beq.n	8002fe8 <__sflush_r+0x18>
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	682e      	ldr	r6, [r5, #0]
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	001a      	movs	r2, r3
 8002ffc:	0149      	lsls	r1, r1, #5
 8002ffe:	400a      	ands	r2, r1
 8003000:	420b      	tst	r3, r1
 8003002:	d034      	beq.n	800306e <__sflush_r+0x9e>
 8003004:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	075b      	lsls	r3, r3, #29
 800300a:	d506      	bpl.n	800301a <__sflush_r+0x4a>
 800300c:	6863      	ldr	r3, [r4, #4]
 800300e:	1ac0      	subs	r0, r0, r3
 8003010:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <__sflush_r+0x4a>
 8003016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003018:	1ac0      	subs	r0, r0, r3
 800301a:	0002      	movs	r2, r0
 800301c:	6a21      	ldr	r1, [r4, #32]
 800301e:	2300      	movs	r3, #0
 8003020:	0028      	movs	r0, r5
 8003022:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003024:	47b8      	blx	r7
 8003026:	89a1      	ldrh	r1, [r4, #12]
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d106      	bne.n	800303a <__sflush_r+0x6a>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	2b1d      	cmp	r3, #29
 8003030:	d831      	bhi.n	8003096 <__sflush_r+0xc6>
 8003032:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <__sflush_r+0x114>)
 8003034:	40da      	lsrs	r2, r3
 8003036:	07d3      	lsls	r3, r2, #31
 8003038:	d52d      	bpl.n	8003096 <__sflush_r+0xc6>
 800303a:	2300      	movs	r3, #0
 800303c:	6063      	str	r3, [r4, #4]
 800303e:	6923      	ldr	r3, [r4, #16]
 8003040:	6023      	str	r3, [r4, #0]
 8003042:	04cb      	lsls	r3, r1, #19
 8003044:	d505      	bpl.n	8003052 <__sflush_r+0x82>
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	d102      	bne.n	8003050 <__sflush_r+0x80>
 800304a:	682b      	ldr	r3, [r5, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d100      	bne.n	8003052 <__sflush_r+0x82>
 8003050:	6560      	str	r0, [r4, #84]	; 0x54
 8003052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003054:	602e      	str	r6, [r5, #0]
 8003056:	2900      	cmp	r1, #0
 8003058:	d0c6      	beq.n	8002fe8 <__sflush_r+0x18>
 800305a:	0023      	movs	r3, r4
 800305c:	3344      	adds	r3, #68	; 0x44
 800305e:	4299      	cmp	r1, r3
 8003060:	d002      	beq.n	8003068 <__sflush_r+0x98>
 8003062:	0028      	movs	r0, r5
 8003064:	f7ff f9a4 	bl	80023b0 <_free_r>
 8003068:	2000      	movs	r0, #0
 800306a:	6360      	str	r0, [r4, #52]	; 0x34
 800306c:	e7bd      	b.n	8002fea <__sflush_r+0x1a>
 800306e:	2301      	movs	r3, #1
 8003070:	0028      	movs	r0, r5
 8003072:	6a21      	ldr	r1, [r4, #32]
 8003074:	47b8      	blx	r7
 8003076:	1c43      	adds	r3, r0, #1
 8003078:	d1c5      	bne.n	8003006 <__sflush_r+0x36>
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0c2      	beq.n	8003006 <__sflush_r+0x36>
 8003080:	2b1d      	cmp	r3, #29
 8003082:	d001      	beq.n	8003088 <__sflush_r+0xb8>
 8003084:	2b16      	cmp	r3, #22
 8003086:	d101      	bne.n	800308c <__sflush_r+0xbc>
 8003088:	602e      	str	r6, [r5, #0]
 800308a:	e7ad      	b.n	8002fe8 <__sflush_r+0x18>
 800308c:	2340      	movs	r3, #64	; 0x40
 800308e:	89a2      	ldrh	r2, [r4, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	81a3      	strh	r3, [r4, #12]
 8003094:	e7a9      	b.n	8002fea <__sflush_r+0x1a>
 8003096:	2340      	movs	r3, #64	; 0x40
 8003098:	430b      	orrs	r3, r1
 800309a:	e7fa      	b.n	8003092 <__sflush_r+0xc2>
 800309c:	690f      	ldr	r7, [r1, #16]
 800309e:	2f00      	cmp	r7, #0
 80030a0:	d0a2      	beq.n	8002fe8 <__sflush_r+0x18>
 80030a2:	680a      	ldr	r2, [r1, #0]
 80030a4:	600f      	str	r7, [r1, #0]
 80030a6:	1bd2      	subs	r2, r2, r7
 80030a8:	9201      	str	r2, [sp, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	079b      	lsls	r3, r3, #30
 80030ae:	d100      	bne.n	80030b2 <__sflush_r+0xe2>
 80030b0:	694a      	ldr	r2, [r1, #20]
 80030b2:	60a2      	str	r2, [r4, #8]
 80030b4:	9b01      	ldr	r3, [sp, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dc00      	bgt.n	80030bc <__sflush_r+0xec>
 80030ba:	e795      	b.n	8002fe8 <__sflush_r+0x18>
 80030bc:	003a      	movs	r2, r7
 80030be:	0028      	movs	r0, r5
 80030c0:	9b01      	ldr	r3, [sp, #4]
 80030c2:	6a21      	ldr	r1, [r4, #32]
 80030c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030c6:	47b0      	blx	r6
 80030c8:	2800      	cmp	r0, #0
 80030ca:	dc06      	bgt.n	80030da <__sflush_r+0x10a>
 80030cc:	2340      	movs	r3, #64	; 0x40
 80030ce:	2001      	movs	r0, #1
 80030d0:	89a2      	ldrh	r2, [r4, #12]
 80030d2:	4240      	negs	r0, r0
 80030d4:	4313      	orrs	r3, r2
 80030d6:	81a3      	strh	r3, [r4, #12]
 80030d8:	e787      	b.n	8002fea <__sflush_r+0x1a>
 80030da:	9b01      	ldr	r3, [sp, #4]
 80030dc:	183f      	adds	r7, r7, r0
 80030de:	1a1b      	subs	r3, r3, r0
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	e7e7      	b.n	80030b4 <__sflush_r+0xe4>
 80030e4:	20400001 	.word	0x20400001

080030e8 <_fflush_r>:
 80030e8:	690b      	ldr	r3, [r1, #16]
 80030ea:	b570      	push	{r4, r5, r6, lr}
 80030ec:	0005      	movs	r5, r0
 80030ee:	000c      	movs	r4, r1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <_fflush_r+0x12>
 80030f4:	2500      	movs	r5, #0
 80030f6:	0028      	movs	r0, r5
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d004      	beq.n	8003108 <_fflush_r+0x20>
 80030fe:	6983      	ldr	r3, [r0, #24]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <_fflush_r+0x20>
 8003104:	f000 f892 	bl	800322c <__sinit>
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <_fflush_r+0x74>)
 800310a:	429c      	cmp	r4, r3
 800310c:	d11b      	bne.n	8003146 <_fflush_r+0x5e>
 800310e:	686c      	ldr	r4, [r5, #4]
 8003110:	220c      	movs	r2, #12
 8003112:	5ea3      	ldrsh	r3, [r4, r2]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ed      	beq.n	80030f4 <_fflush_r+0xc>
 8003118:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800311a:	07d2      	lsls	r2, r2, #31
 800311c:	d404      	bmi.n	8003128 <_fflush_r+0x40>
 800311e:	059b      	lsls	r3, r3, #22
 8003120:	d402      	bmi.n	8003128 <_fflush_r+0x40>
 8003122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003124:	f000 f923 	bl	800336e <__retarget_lock_acquire_recursive>
 8003128:	0028      	movs	r0, r5
 800312a:	0021      	movs	r1, r4
 800312c:	f7ff ff50 	bl	8002fd0 <__sflush_r>
 8003130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003132:	0005      	movs	r5, r0
 8003134:	07db      	lsls	r3, r3, #31
 8003136:	d4de      	bmi.n	80030f6 <_fflush_r+0xe>
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	059b      	lsls	r3, r3, #22
 800313c:	d4db      	bmi.n	80030f6 <_fflush_r+0xe>
 800313e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003140:	f000 f916 	bl	8003370 <__retarget_lock_release_recursive>
 8003144:	e7d7      	b.n	80030f6 <_fflush_r+0xe>
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <_fflush_r+0x78>)
 8003148:	429c      	cmp	r4, r3
 800314a:	d101      	bne.n	8003150 <_fflush_r+0x68>
 800314c:	68ac      	ldr	r4, [r5, #8]
 800314e:	e7df      	b.n	8003110 <_fflush_r+0x28>
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <_fflush_r+0x7c>)
 8003152:	429c      	cmp	r4, r3
 8003154:	d1dc      	bne.n	8003110 <_fflush_r+0x28>
 8003156:	68ec      	ldr	r4, [r5, #12]
 8003158:	e7da      	b.n	8003110 <_fflush_r+0x28>
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	080038a4 	.word	0x080038a4
 8003160:	080038c4 	.word	0x080038c4
 8003164:	08003884 	.word	0x08003884

08003168 <std>:
 8003168:	2300      	movs	r3, #0
 800316a:	b510      	push	{r4, lr}
 800316c:	0004      	movs	r4, r0
 800316e:	6003      	str	r3, [r0, #0]
 8003170:	6043      	str	r3, [r0, #4]
 8003172:	6083      	str	r3, [r0, #8]
 8003174:	8181      	strh	r1, [r0, #12]
 8003176:	6643      	str	r3, [r0, #100]	; 0x64
 8003178:	0019      	movs	r1, r3
 800317a:	81c2      	strh	r2, [r0, #14]
 800317c:	6103      	str	r3, [r0, #16]
 800317e:	6143      	str	r3, [r0, #20]
 8003180:	6183      	str	r3, [r0, #24]
 8003182:	2208      	movs	r2, #8
 8003184:	305c      	adds	r0, #92	; 0x5c
 8003186:	f7ff f875 	bl	8002274 <memset>
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <std+0x38>)
 800318c:	6224      	str	r4, [r4, #32]
 800318e:	6263      	str	r3, [r4, #36]	; 0x24
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <std+0x3c>)
 8003192:	62a3      	str	r3, [r4, #40]	; 0x28
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <std+0x40>)
 8003196:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <std+0x44>)
 800319a:	6323      	str	r3, [r4, #48]	; 0x30
 800319c:	bd10      	pop	{r4, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	080035b1 	.word	0x080035b1
 80031a4:	080035d9 	.word	0x080035d9
 80031a8:	08003611 	.word	0x08003611
 80031ac:	0800363d 	.word	0x0800363d

080031b0 <_cleanup_r>:
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4902      	ldr	r1, [pc, #8]	; (80031bc <_cleanup_r+0xc>)
 80031b4:	f000 f8ba 	bl	800332c <_fwalk_reent>
 80031b8:	bd10      	pop	{r4, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	080030e9 	.word	0x080030e9

080031c0 <__sfmoreglue>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	2568      	movs	r5, #104	; 0x68
 80031c4:	1e4a      	subs	r2, r1, #1
 80031c6:	4355      	muls	r5, r2
 80031c8:	000e      	movs	r6, r1
 80031ca:	0029      	movs	r1, r5
 80031cc:	3174      	adds	r1, #116	; 0x74
 80031ce:	f7ff f95b 	bl	8002488 <_malloc_r>
 80031d2:	1e04      	subs	r4, r0, #0
 80031d4:	d008      	beq.n	80031e8 <__sfmoreglue+0x28>
 80031d6:	2100      	movs	r1, #0
 80031d8:	002a      	movs	r2, r5
 80031da:	6001      	str	r1, [r0, #0]
 80031dc:	6046      	str	r6, [r0, #4]
 80031de:	300c      	adds	r0, #12
 80031e0:	60a0      	str	r0, [r4, #8]
 80031e2:	3268      	adds	r2, #104	; 0x68
 80031e4:	f7ff f846 	bl	8002274 <memset>
 80031e8:	0020      	movs	r0, r4
 80031ea:	bd70      	pop	{r4, r5, r6, pc}

080031ec <__sfp_lock_acquire>:
 80031ec:	b510      	push	{r4, lr}
 80031ee:	4802      	ldr	r0, [pc, #8]	; (80031f8 <__sfp_lock_acquire+0xc>)
 80031f0:	f000 f8bd 	bl	800336e <__retarget_lock_acquire_recursive>
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	20000121 	.word	0x20000121

080031fc <__sfp_lock_release>:
 80031fc:	b510      	push	{r4, lr}
 80031fe:	4802      	ldr	r0, [pc, #8]	; (8003208 <__sfp_lock_release+0xc>)
 8003200:	f000 f8b6 	bl	8003370 <__retarget_lock_release_recursive>
 8003204:	bd10      	pop	{r4, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	20000121 	.word	0x20000121

0800320c <__sinit_lock_acquire>:
 800320c:	b510      	push	{r4, lr}
 800320e:	4802      	ldr	r0, [pc, #8]	; (8003218 <__sinit_lock_acquire+0xc>)
 8003210:	f000 f8ad 	bl	800336e <__retarget_lock_acquire_recursive>
 8003214:	bd10      	pop	{r4, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	20000122 	.word	0x20000122

0800321c <__sinit_lock_release>:
 800321c:	b510      	push	{r4, lr}
 800321e:	4802      	ldr	r0, [pc, #8]	; (8003228 <__sinit_lock_release+0xc>)
 8003220:	f000 f8a6 	bl	8003370 <__retarget_lock_release_recursive>
 8003224:	bd10      	pop	{r4, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	20000122 	.word	0x20000122

0800322c <__sinit>:
 800322c:	b513      	push	{r0, r1, r4, lr}
 800322e:	0004      	movs	r4, r0
 8003230:	f7ff ffec 	bl	800320c <__sinit_lock_acquire>
 8003234:	69a3      	ldr	r3, [r4, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <__sinit+0x14>
 800323a:	f7ff ffef 	bl	800321c <__sinit_lock_release>
 800323e:	bd13      	pop	{r0, r1, r4, pc}
 8003240:	64a3      	str	r3, [r4, #72]	; 0x48
 8003242:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003244:	6523      	str	r3, [r4, #80]	; 0x50
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <__sinit+0x68>)
 8003248:	4a13      	ldr	r2, [pc, #76]	; (8003298 <__sinit+0x6c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	62a2      	str	r2, [r4, #40]	; 0x28
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	42a3      	cmp	r3, r4
 8003252:	d101      	bne.n	8003258 <__sinit+0x2c>
 8003254:	2301      	movs	r3, #1
 8003256:	61a3      	str	r3, [r4, #24]
 8003258:	0020      	movs	r0, r4
 800325a:	f000 f81f 	bl	800329c <__sfp>
 800325e:	6060      	str	r0, [r4, #4]
 8003260:	0020      	movs	r0, r4
 8003262:	f000 f81b 	bl	800329c <__sfp>
 8003266:	60a0      	str	r0, [r4, #8]
 8003268:	0020      	movs	r0, r4
 800326a:	f000 f817 	bl	800329c <__sfp>
 800326e:	2200      	movs	r2, #0
 8003270:	2104      	movs	r1, #4
 8003272:	60e0      	str	r0, [r4, #12]
 8003274:	6860      	ldr	r0, [r4, #4]
 8003276:	f7ff ff77 	bl	8003168 <std>
 800327a:	2201      	movs	r2, #1
 800327c:	2109      	movs	r1, #9
 800327e:	68a0      	ldr	r0, [r4, #8]
 8003280:	f7ff ff72 	bl	8003168 <std>
 8003284:	2202      	movs	r2, #2
 8003286:	2112      	movs	r1, #18
 8003288:	68e0      	ldr	r0, [r4, #12]
 800328a:	f7ff ff6d 	bl	8003168 <std>
 800328e:	2301      	movs	r3, #1
 8003290:	61a3      	str	r3, [r4, #24]
 8003292:	e7d2      	b.n	800323a <__sinit+0xe>
 8003294:	0800379c 	.word	0x0800379c
 8003298:	080031b1 	.word	0x080031b1

0800329c <__sfp>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	0007      	movs	r7, r0
 80032a0:	f7ff ffa4 	bl	80031ec <__sfp_lock_acquire>
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <__sfp+0x88>)
 80032a6:	681e      	ldr	r6, [r3, #0]
 80032a8:	69b3      	ldr	r3, [r6, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <__sfp+0x18>
 80032ae:	0030      	movs	r0, r6
 80032b0:	f7ff ffbc 	bl	800322c <__sinit>
 80032b4:	3648      	adds	r6, #72	; 0x48
 80032b6:	68b4      	ldr	r4, [r6, #8]
 80032b8:	6873      	ldr	r3, [r6, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	d504      	bpl.n	80032c8 <__sfp+0x2c>
 80032be:	6833      	ldr	r3, [r6, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d022      	beq.n	800330a <__sfp+0x6e>
 80032c4:	6836      	ldr	r6, [r6, #0]
 80032c6:	e7f6      	b.n	80032b6 <__sfp+0x1a>
 80032c8:	220c      	movs	r2, #12
 80032ca:	5ea5      	ldrsh	r5, [r4, r2]
 80032cc:	2d00      	cmp	r5, #0
 80032ce:	d11a      	bne.n	8003306 <__sfp+0x6a>
 80032d0:	0020      	movs	r0, r4
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <__sfp+0x8c>)
 80032d4:	3058      	adds	r0, #88	; 0x58
 80032d6:	60e3      	str	r3, [r4, #12]
 80032d8:	6665      	str	r5, [r4, #100]	; 0x64
 80032da:	f000 f847 	bl	800336c <__retarget_lock_init_recursive>
 80032de:	f7ff ff8d 	bl	80031fc <__sfp_lock_release>
 80032e2:	0020      	movs	r0, r4
 80032e4:	2208      	movs	r2, #8
 80032e6:	0029      	movs	r1, r5
 80032e8:	6025      	str	r5, [r4, #0]
 80032ea:	60a5      	str	r5, [r4, #8]
 80032ec:	6065      	str	r5, [r4, #4]
 80032ee:	6125      	str	r5, [r4, #16]
 80032f0:	6165      	str	r5, [r4, #20]
 80032f2:	61a5      	str	r5, [r4, #24]
 80032f4:	305c      	adds	r0, #92	; 0x5c
 80032f6:	f7fe ffbd 	bl	8002274 <memset>
 80032fa:	6365      	str	r5, [r4, #52]	; 0x34
 80032fc:	63a5      	str	r5, [r4, #56]	; 0x38
 80032fe:	64a5      	str	r5, [r4, #72]	; 0x48
 8003300:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003302:	0020      	movs	r0, r4
 8003304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003306:	3468      	adds	r4, #104	; 0x68
 8003308:	e7d7      	b.n	80032ba <__sfp+0x1e>
 800330a:	2104      	movs	r1, #4
 800330c:	0038      	movs	r0, r7
 800330e:	f7ff ff57 	bl	80031c0 <__sfmoreglue>
 8003312:	1e04      	subs	r4, r0, #0
 8003314:	6030      	str	r0, [r6, #0]
 8003316:	d1d5      	bne.n	80032c4 <__sfp+0x28>
 8003318:	f7ff ff70 	bl	80031fc <__sfp_lock_release>
 800331c:	230c      	movs	r3, #12
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	e7ef      	b.n	8003302 <__sfp+0x66>
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	0800379c 	.word	0x0800379c
 8003328:	ffff0001 	.word	0xffff0001

0800332c <_fwalk_reent>:
 800332c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800332e:	0004      	movs	r4, r0
 8003330:	0006      	movs	r6, r0
 8003332:	2700      	movs	r7, #0
 8003334:	9101      	str	r1, [sp, #4]
 8003336:	3448      	adds	r4, #72	; 0x48
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	68a5      	ldr	r5, [r4, #8]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	9b00      	ldr	r3, [sp, #0]
 8003340:	3b01      	subs	r3, #1
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	d504      	bpl.n	8003350 <_fwalk_reent+0x24>
 8003346:	6824      	ldr	r4, [r4, #0]
 8003348:	2c00      	cmp	r4, #0
 800334a:	d1f5      	bne.n	8003338 <_fwalk_reent+0xc>
 800334c:	0038      	movs	r0, r7
 800334e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003350:	89ab      	ldrh	r3, [r5, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d908      	bls.n	8003368 <_fwalk_reent+0x3c>
 8003356:	220e      	movs	r2, #14
 8003358:	5eab      	ldrsh	r3, [r5, r2]
 800335a:	3301      	adds	r3, #1
 800335c:	d004      	beq.n	8003368 <_fwalk_reent+0x3c>
 800335e:	0029      	movs	r1, r5
 8003360:	0030      	movs	r0, r6
 8003362:	9b01      	ldr	r3, [sp, #4]
 8003364:	4798      	blx	r3
 8003366:	4307      	orrs	r7, r0
 8003368:	3568      	adds	r5, #104	; 0x68
 800336a:	e7e8      	b.n	800333e <_fwalk_reent+0x12>

0800336c <__retarget_lock_init_recursive>:
 800336c:	4770      	bx	lr

0800336e <__retarget_lock_acquire_recursive>:
 800336e:	4770      	bx	lr

08003370 <__retarget_lock_release_recursive>:
 8003370:	4770      	bx	lr
	...

08003374 <__swhatbuf_r>:
 8003374:	b570      	push	{r4, r5, r6, lr}
 8003376:	000e      	movs	r6, r1
 8003378:	001d      	movs	r5, r3
 800337a:	230e      	movs	r3, #14
 800337c:	5ec9      	ldrsh	r1, [r1, r3]
 800337e:	0014      	movs	r4, r2
 8003380:	b096      	sub	sp, #88	; 0x58
 8003382:	2900      	cmp	r1, #0
 8003384:	da08      	bge.n	8003398 <__swhatbuf_r+0x24>
 8003386:	220c      	movs	r2, #12
 8003388:	5eb3      	ldrsh	r3, [r6, r2]
 800338a:	2200      	movs	r2, #0
 800338c:	602a      	str	r2, [r5, #0]
 800338e:	061b      	lsls	r3, r3, #24
 8003390:	d411      	bmi.n	80033b6 <__swhatbuf_r+0x42>
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	e00f      	b.n	80033b8 <__swhatbuf_r+0x44>
 8003398:	466a      	mov	r2, sp
 800339a:	f000 f97b 	bl	8003694 <_fstat_r>
 800339e:	2800      	cmp	r0, #0
 80033a0:	dbf1      	blt.n	8003386 <__swhatbuf_r+0x12>
 80033a2:	23f0      	movs	r3, #240	; 0xf0
 80033a4:	9901      	ldr	r1, [sp, #4]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	4019      	ands	r1, r3
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <__swhatbuf_r+0x4c>)
 80033ac:	18c9      	adds	r1, r1, r3
 80033ae:	424b      	negs	r3, r1
 80033b0:	4159      	adcs	r1, r3
 80033b2:	6029      	str	r1, [r5, #0]
 80033b4:	e7ed      	b.n	8003392 <__swhatbuf_r+0x1e>
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	2000      	movs	r0, #0
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	b016      	add	sp, #88	; 0x58
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	ffffe000 	.word	0xffffe000

080033c4 <__smakebuf_r>:
 80033c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033c6:	2602      	movs	r6, #2
 80033c8:	898b      	ldrh	r3, [r1, #12]
 80033ca:	0005      	movs	r5, r0
 80033cc:	000c      	movs	r4, r1
 80033ce:	4233      	tst	r3, r6
 80033d0:	d006      	beq.n	80033e0 <__smakebuf_r+0x1c>
 80033d2:	0023      	movs	r3, r4
 80033d4:	3347      	adds	r3, #71	; 0x47
 80033d6:	6023      	str	r3, [r4, #0]
 80033d8:	6123      	str	r3, [r4, #16]
 80033da:	2301      	movs	r3, #1
 80033dc:	6163      	str	r3, [r4, #20]
 80033de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80033e0:	466a      	mov	r2, sp
 80033e2:	ab01      	add	r3, sp, #4
 80033e4:	f7ff ffc6 	bl	8003374 <__swhatbuf_r>
 80033e8:	9900      	ldr	r1, [sp, #0]
 80033ea:	0007      	movs	r7, r0
 80033ec:	0028      	movs	r0, r5
 80033ee:	f7ff f84b 	bl	8002488 <_malloc_r>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d108      	bne.n	8003408 <__smakebuf_r+0x44>
 80033f6:	220c      	movs	r2, #12
 80033f8:	5ea3      	ldrsh	r3, [r4, r2]
 80033fa:	059a      	lsls	r2, r3, #22
 80033fc:	d4ef      	bmi.n	80033de <__smakebuf_r+0x1a>
 80033fe:	2203      	movs	r2, #3
 8003400:	4393      	bics	r3, r2
 8003402:	431e      	orrs	r6, r3
 8003404:	81a6      	strh	r6, [r4, #12]
 8003406:	e7e4      	b.n	80033d2 <__smakebuf_r+0xe>
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <__smakebuf_r+0x84>)
 800340a:	62ab      	str	r3, [r5, #40]	; 0x28
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	89a2      	ldrh	r2, [r4, #12]
 8003410:	6020      	str	r0, [r4, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	81a3      	strh	r3, [r4, #12]
 8003416:	9b00      	ldr	r3, [sp, #0]
 8003418:	6120      	str	r0, [r4, #16]
 800341a:	6163      	str	r3, [r4, #20]
 800341c:	9b01      	ldr	r3, [sp, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <__smakebuf_r+0x7a>
 8003422:	0028      	movs	r0, r5
 8003424:	230e      	movs	r3, #14
 8003426:	5ee1      	ldrsh	r1, [r4, r3]
 8003428:	f000 f946 	bl	80036b8 <_isatty_r>
 800342c:	2800      	cmp	r0, #0
 800342e:	d006      	beq.n	800343e <__smakebuf_r+0x7a>
 8003430:	2203      	movs	r2, #3
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	4393      	bics	r3, r2
 8003436:	001a      	movs	r2, r3
 8003438:	2301      	movs	r3, #1
 800343a:	4313      	orrs	r3, r2
 800343c:	81a3      	strh	r3, [r4, #12]
 800343e:	89a0      	ldrh	r0, [r4, #12]
 8003440:	4307      	orrs	r7, r0
 8003442:	81a7      	strh	r7, [r4, #12]
 8003444:	e7cb      	b.n	80033de <__smakebuf_r+0x1a>
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	080031b1 	.word	0x080031b1

0800344c <memchr>:
 800344c:	b2c9      	uxtb	r1, r1
 800344e:	1882      	adds	r2, r0, r2
 8003450:	4290      	cmp	r0, r2
 8003452:	d101      	bne.n	8003458 <memchr+0xc>
 8003454:	2000      	movs	r0, #0
 8003456:	4770      	bx	lr
 8003458:	7803      	ldrb	r3, [r0, #0]
 800345a:	428b      	cmp	r3, r1
 800345c:	d0fb      	beq.n	8003456 <memchr+0xa>
 800345e:	3001      	adds	r0, #1
 8003460:	e7f6      	b.n	8003450 <memchr+0x4>

08003462 <memcpy>:
 8003462:	2300      	movs	r3, #0
 8003464:	b510      	push	{r4, lr}
 8003466:	429a      	cmp	r2, r3
 8003468:	d100      	bne.n	800346c <memcpy+0xa>
 800346a:	bd10      	pop	{r4, pc}
 800346c:	5ccc      	ldrb	r4, [r1, r3]
 800346e:	54c4      	strb	r4, [r0, r3]
 8003470:	3301      	adds	r3, #1
 8003472:	e7f8      	b.n	8003466 <memcpy+0x4>

08003474 <memmove>:
 8003474:	b510      	push	{r4, lr}
 8003476:	4288      	cmp	r0, r1
 8003478:	d902      	bls.n	8003480 <memmove+0xc>
 800347a:	188b      	adds	r3, r1, r2
 800347c:	4298      	cmp	r0, r3
 800347e:	d303      	bcc.n	8003488 <memmove+0x14>
 8003480:	2300      	movs	r3, #0
 8003482:	e007      	b.n	8003494 <memmove+0x20>
 8003484:	5c8b      	ldrb	r3, [r1, r2]
 8003486:	5483      	strb	r3, [r0, r2]
 8003488:	3a01      	subs	r2, #1
 800348a:	d2fb      	bcs.n	8003484 <memmove+0x10>
 800348c:	bd10      	pop	{r4, pc}
 800348e:	5ccc      	ldrb	r4, [r1, r3]
 8003490:	54c4      	strb	r4, [r0, r3]
 8003492:	3301      	adds	r3, #1
 8003494:	429a      	cmp	r2, r3
 8003496:	d1fa      	bne.n	800348e <memmove+0x1a>
 8003498:	e7f8      	b.n	800348c <memmove+0x18>
	...

0800349c <__malloc_lock>:
 800349c:	b510      	push	{r4, lr}
 800349e:	4802      	ldr	r0, [pc, #8]	; (80034a8 <__malloc_lock+0xc>)
 80034a0:	f7ff ff65 	bl	800336e <__retarget_lock_acquire_recursive>
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	20000120 	.word	0x20000120

080034ac <__malloc_unlock>:
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4802      	ldr	r0, [pc, #8]	; (80034b8 <__malloc_unlock+0xc>)
 80034b0:	f7ff ff5e 	bl	8003370 <__retarget_lock_release_recursive>
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	20000120 	.word	0x20000120

080034bc <_realloc_r>:
 80034bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034be:	0007      	movs	r7, r0
 80034c0:	000e      	movs	r6, r1
 80034c2:	0014      	movs	r4, r2
 80034c4:	2900      	cmp	r1, #0
 80034c6:	d105      	bne.n	80034d4 <_realloc_r+0x18>
 80034c8:	0011      	movs	r1, r2
 80034ca:	f7fe ffdd 	bl	8002488 <_malloc_r>
 80034ce:	0005      	movs	r5, r0
 80034d0:	0028      	movs	r0, r5
 80034d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d103      	bne.n	80034e0 <_realloc_r+0x24>
 80034d8:	f7fe ff6a 	bl	80023b0 <_free_r>
 80034dc:	0025      	movs	r5, r4
 80034de:	e7f7      	b.n	80034d0 <_realloc_r+0x14>
 80034e0:	f000 f910 	bl	8003704 <_malloc_usable_size_r>
 80034e4:	9001      	str	r0, [sp, #4]
 80034e6:	4284      	cmp	r4, r0
 80034e8:	d803      	bhi.n	80034f2 <_realloc_r+0x36>
 80034ea:	0035      	movs	r5, r6
 80034ec:	0843      	lsrs	r3, r0, #1
 80034ee:	42a3      	cmp	r3, r4
 80034f0:	d3ee      	bcc.n	80034d0 <_realloc_r+0x14>
 80034f2:	0021      	movs	r1, r4
 80034f4:	0038      	movs	r0, r7
 80034f6:	f7fe ffc7 	bl	8002488 <_malloc_r>
 80034fa:	1e05      	subs	r5, r0, #0
 80034fc:	d0e8      	beq.n	80034d0 <_realloc_r+0x14>
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	0022      	movs	r2, r4
 8003502:	429c      	cmp	r4, r3
 8003504:	d900      	bls.n	8003508 <_realloc_r+0x4c>
 8003506:	001a      	movs	r2, r3
 8003508:	0031      	movs	r1, r6
 800350a:	0028      	movs	r0, r5
 800350c:	f7ff ffa9 	bl	8003462 <memcpy>
 8003510:	0031      	movs	r1, r6
 8003512:	0038      	movs	r0, r7
 8003514:	f7fe ff4c 	bl	80023b0 <_free_r>
 8003518:	e7da      	b.n	80034d0 <_realloc_r+0x14>

0800351a <_raise_r>:
 800351a:	b570      	push	{r4, r5, r6, lr}
 800351c:	0004      	movs	r4, r0
 800351e:	000d      	movs	r5, r1
 8003520:	291f      	cmp	r1, #31
 8003522:	d904      	bls.n	800352e <_raise_r+0x14>
 8003524:	2316      	movs	r3, #22
 8003526:	6003      	str	r3, [r0, #0]
 8003528:	2001      	movs	r0, #1
 800352a:	4240      	negs	r0, r0
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003530:	2b00      	cmp	r3, #0
 8003532:	d004      	beq.n	800353e <_raise_r+0x24>
 8003534:	008a      	lsls	r2, r1, #2
 8003536:	189b      	adds	r3, r3, r2
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	2a00      	cmp	r2, #0
 800353c:	d108      	bne.n	8003550 <_raise_r+0x36>
 800353e:	0020      	movs	r0, r4
 8003540:	f000 f832 	bl	80035a8 <_getpid_r>
 8003544:	002a      	movs	r2, r5
 8003546:	0001      	movs	r1, r0
 8003548:	0020      	movs	r0, r4
 800354a:	f000 f81b 	bl	8003584 <_kill_r>
 800354e:	e7ed      	b.n	800352c <_raise_r+0x12>
 8003550:	2000      	movs	r0, #0
 8003552:	2a01      	cmp	r2, #1
 8003554:	d0ea      	beq.n	800352c <_raise_r+0x12>
 8003556:	1c51      	adds	r1, r2, #1
 8003558:	d103      	bne.n	8003562 <_raise_r+0x48>
 800355a:	2316      	movs	r3, #22
 800355c:	3001      	adds	r0, #1
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	e7e4      	b.n	800352c <_raise_r+0x12>
 8003562:	2400      	movs	r4, #0
 8003564:	0028      	movs	r0, r5
 8003566:	601c      	str	r4, [r3, #0]
 8003568:	4790      	blx	r2
 800356a:	0020      	movs	r0, r4
 800356c:	e7de      	b.n	800352c <_raise_r+0x12>
	...

08003570 <raise>:
 8003570:	b510      	push	{r4, lr}
 8003572:	4b03      	ldr	r3, [pc, #12]	; (8003580 <raise+0x10>)
 8003574:	0001      	movs	r1, r0
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	f7ff ffcf 	bl	800351a <_raise_r>
 800357c:	bd10      	pop	{r4, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	2000000c 	.word	0x2000000c

08003584 <_kill_r>:
 8003584:	2300      	movs	r3, #0
 8003586:	b570      	push	{r4, r5, r6, lr}
 8003588:	4d06      	ldr	r5, [pc, #24]	; (80035a4 <_kill_r+0x20>)
 800358a:	0004      	movs	r4, r0
 800358c:	0008      	movs	r0, r1
 800358e:	0011      	movs	r1, r2
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	f7fd f94c 	bl	800082e <_kill>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	d103      	bne.n	80035a2 <_kill_r+0x1e>
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d000      	beq.n	80035a2 <_kill_r+0x1e>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	bd70      	pop	{r4, r5, r6, pc}
 80035a4:	20000124 	.word	0x20000124

080035a8 <_getpid_r>:
 80035a8:	b510      	push	{r4, lr}
 80035aa:	f7fd f93a 	bl	8000822 <_getpid>
 80035ae:	bd10      	pop	{r4, pc}

080035b0 <__sread>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	000c      	movs	r4, r1
 80035b4:	250e      	movs	r5, #14
 80035b6:	5f49      	ldrsh	r1, [r1, r5]
 80035b8:	f000 f8ac 	bl	8003714 <_read_r>
 80035bc:	2800      	cmp	r0, #0
 80035be:	db03      	blt.n	80035c8 <__sread+0x18>
 80035c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035c2:	181b      	adds	r3, r3, r0
 80035c4:	6563      	str	r3, [r4, #84]	; 0x54
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	89a3      	ldrh	r3, [r4, #12]
 80035ca:	4a02      	ldr	r2, [pc, #8]	; (80035d4 <__sread+0x24>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	81a3      	strh	r3, [r4, #12]
 80035d0:	e7f9      	b.n	80035c6 <__sread+0x16>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	ffffefff 	.word	0xffffefff

080035d8 <__swrite>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	001f      	movs	r7, r3
 80035dc:	898b      	ldrh	r3, [r1, #12]
 80035de:	0005      	movs	r5, r0
 80035e0:	000c      	movs	r4, r1
 80035e2:	0016      	movs	r6, r2
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	d505      	bpl.n	80035f4 <__swrite+0x1c>
 80035e8:	230e      	movs	r3, #14
 80035ea:	5ec9      	ldrsh	r1, [r1, r3]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2302      	movs	r3, #2
 80035f0:	f000 f874 	bl	80036dc <_lseek_r>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	4a05      	ldr	r2, [pc, #20]	; (800360c <__swrite+0x34>)
 80035f8:	0028      	movs	r0, r5
 80035fa:	4013      	ands	r3, r2
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	0032      	movs	r2, r6
 8003600:	230e      	movs	r3, #14
 8003602:	5ee1      	ldrsh	r1, [r4, r3]
 8003604:	003b      	movs	r3, r7
 8003606:	f000 f81f 	bl	8003648 <_write_r>
 800360a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800360c:	ffffefff 	.word	0xffffefff

08003610 <__sseek>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	000c      	movs	r4, r1
 8003614:	250e      	movs	r5, #14
 8003616:	5f49      	ldrsh	r1, [r1, r5]
 8003618:	f000 f860 	bl	80036dc <_lseek_r>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	1c42      	adds	r2, r0, #1
 8003620:	d103      	bne.n	800362a <__sseek+0x1a>
 8003622:	4a05      	ldr	r2, [pc, #20]	; (8003638 <__sseek+0x28>)
 8003624:	4013      	ands	r3, r2
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	0152      	lsls	r2, r2, #5
 800362e:	4313      	orrs	r3, r2
 8003630:	81a3      	strh	r3, [r4, #12]
 8003632:	6560      	str	r0, [r4, #84]	; 0x54
 8003634:	e7f8      	b.n	8003628 <__sseek+0x18>
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	ffffefff 	.word	0xffffefff

0800363c <__sclose>:
 800363c:	b510      	push	{r4, lr}
 800363e:	230e      	movs	r3, #14
 8003640:	5ec9      	ldrsh	r1, [r1, r3]
 8003642:	f000 f815 	bl	8003670 <_close_r>
 8003646:	bd10      	pop	{r4, pc}

08003648 <_write_r>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	0004      	movs	r4, r0
 800364c:	0008      	movs	r0, r1
 800364e:	0011      	movs	r1, r2
 8003650:	001a      	movs	r2, r3
 8003652:	2300      	movs	r3, #0
 8003654:	4d05      	ldr	r5, [pc, #20]	; (800366c <_write_r+0x24>)
 8003656:	602b      	str	r3, [r5, #0]
 8003658:	f7fd f922 	bl	80008a0 <_write>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	d103      	bne.n	8003668 <_write_r+0x20>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d000      	beq.n	8003668 <_write_r+0x20>
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	bd70      	pop	{r4, r5, r6, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	20000124 	.word	0x20000124

08003670 <_close_r>:
 8003670:	2300      	movs	r3, #0
 8003672:	b570      	push	{r4, r5, r6, lr}
 8003674:	4d06      	ldr	r5, [pc, #24]	; (8003690 <_close_r+0x20>)
 8003676:	0004      	movs	r4, r0
 8003678:	0008      	movs	r0, r1
 800367a:	602b      	str	r3, [r5, #0]
 800367c:	f7fd f92c 	bl	80008d8 <_close>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d103      	bne.n	800368c <_close_r+0x1c>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d000      	beq.n	800368c <_close_r+0x1c>
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	bd70      	pop	{r4, r5, r6, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	20000124 	.word	0x20000124

08003694 <_fstat_r>:
 8003694:	2300      	movs	r3, #0
 8003696:	b570      	push	{r4, r5, r6, lr}
 8003698:	4d06      	ldr	r5, [pc, #24]	; (80036b4 <_fstat_r+0x20>)
 800369a:	0004      	movs	r4, r0
 800369c:	0008      	movs	r0, r1
 800369e:	0011      	movs	r1, r2
 80036a0:	602b      	str	r3, [r5, #0]
 80036a2:	f7fd f923 	bl	80008ec <_fstat>
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d103      	bne.n	80036b2 <_fstat_r+0x1e>
 80036aa:	682b      	ldr	r3, [r5, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d000      	beq.n	80036b2 <_fstat_r+0x1e>
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
 80036b4:	20000124 	.word	0x20000124

080036b8 <_isatty_r>:
 80036b8:	2300      	movs	r3, #0
 80036ba:	b570      	push	{r4, r5, r6, lr}
 80036bc:	4d06      	ldr	r5, [pc, #24]	; (80036d8 <_isatty_r+0x20>)
 80036be:	0004      	movs	r4, r0
 80036c0:	0008      	movs	r0, r1
 80036c2:	602b      	str	r3, [r5, #0]
 80036c4:	f7fd f920 	bl	8000908 <_isatty>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	d103      	bne.n	80036d4 <_isatty_r+0x1c>
 80036cc:	682b      	ldr	r3, [r5, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d000      	beq.n	80036d4 <_isatty_r+0x1c>
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000124 	.word	0x20000124

080036dc <_lseek_r>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	0004      	movs	r4, r0
 80036e0:	0008      	movs	r0, r1
 80036e2:	0011      	movs	r1, r2
 80036e4:	001a      	movs	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	4d05      	ldr	r5, [pc, #20]	; (8003700 <_lseek_r+0x24>)
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fd f915 	bl	800091a <_lseek>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d103      	bne.n	80036fc <_lseek_r+0x20>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d000      	beq.n	80036fc <_lseek_r+0x20>
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	20000124 	.word	0x20000124

08003704 <_malloc_usable_size_r>:
 8003704:	1f0b      	subs	r3, r1, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1f18      	subs	r0, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	da01      	bge.n	8003712 <_malloc_usable_size_r+0xe>
 800370e:	580b      	ldr	r3, [r1, r0]
 8003710:	18c0      	adds	r0, r0, r3
 8003712:	4770      	bx	lr

08003714 <_read_r>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	0004      	movs	r4, r0
 8003718:	0008      	movs	r0, r1
 800371a:	0011      	movs	r1, r2
 800371c:	001a      	movs	r2, r3
 800371e:	2300      	movs	r3, #0
 8003720:	4d05      	ldr	r5, [pc, #20]	; (8003738 <_read_r+0x24>)
 8003722:	602b      	str	r3, [r5, #0]
 8003724:	f7fd f89f 	bl	8000866 <_read>
 8003728:	1c43      	adds	r3, r0, #1
 800372a:	d103      	bne.n	8003734 <_read_r+0x20>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d000      	beq.n	8003734 <_read_r+0x20>
 8003732:	6023      	str	r3, [r4, #0]
 8003734:	bd70      	pop	{r4, r5, r6, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	20000124 	.word	0x20000124

0800373c <_init>:
 800373c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003742:	bc08      	pop	{r3}
 8003744:	469e      	mov	lr, r3
 8003746:	4770      	bx	lr

08003748 <_fini>:
 8003748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374e:	bc08      	pop	{r3}
 8003750:	469e      	mov	lr, r3
 8003752:	4770      	bx	lr
